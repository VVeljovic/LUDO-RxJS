(()=>{"use strict";var t={0:[6,13],1:[6,12],2:[6,11],3:[6,10],4:[6,9],5:[5,8],6:[4,8],7:[3,8],8:[2,8],9:[1,8],10:[0,8],11:[0,7],12:[0,6],13:[1,6],14:[2,6],15:[3,6],16:[4,6],17:[5,6],18:[6,5],19:[6,4],20:[6,3],21:[6,2],22:[6,1],23:[6,0],24:[7,0],25:[8,0],26:[8,1],27:[8,2],28:[8,3],29:[8,4],30:[8,5],31:[9,6],32:[10,6],33:[11,6],34:[12,6],35:[13,6],36:[14,6],37:[14,7],38:[14,8],39:[13,8],40:[12,8],41:[11,8],42:[10,8],43:[9,8],44:[8,9],45:[8,10],46:[8,11],47:[8,12],48:[8,13],49:[8,14],50:[7,14],51:[6,14],100:[7,13],101:[7,12],102:[7,11],103:[7,10],104:[7,9],105:[7,8],200:[7,1],201:[7,2],202:[7,3],203:[7,4],204:[7,5],205:[7,6],500:[1.5,10.58],501:[3.57,10.58],502:[1.5,12.43],503:[3.57,12.43],600:[10.5,1.58],601:[12.54,1.58],602:[10.5,3.45],603:[12.54,3.45]},e=["P1","P2"],n={P1:[500,501,502,503],P2:[600,601,602,603]},r={P1:0,P2:26},i={P1:[100,101,102,103,104],P2:[200,201,202,203,204]},o={P1:105,P2:205},u={P1:50,P2:24},c=[0,8,13,21,26,34,39,47],s="DICE_NOT_ROLLED",l="DICE_ROLLED",a=document.querySelector("#dice-btn"),f=document.querySelector("button#reset-btn"),h=document.querySelector(".player-pieces"),p={P1:document.querySelectorAll('[player-id="P1"].player-piece'),P2:document.querySelectorAll('[player-id="P2"].player-piece')},d=function(){function n(){}return n.setPiecePosition=function(e,n,r){p[e]&&p[e][n]||console.log("greska");var i=t[r],o=i[0],u=i[1],c=p[e][n];c.style.top=6.66*u+"%",c.style.left=6.66*o+"%"},n.setTurn=function(t){if(t<0||t>e.length)console.error("index out of bound");else{var n=e[t];document.querySelector(".active-player span").innerText=n;var r=document.querySelector(".player-base.highlight");r&&r.classList.remove("highlight"),document.querySelector('[player-id="'.concat(n,'"].player-base')).classList.add("highlight")}},n.enableDice=function(){a.removeAttribute("disabled")},n.disableDice=function(){a.setAttribute("disabled","")},n.highlightPieces=function(t,e){e.forEach((function(e){p[t][e].classList.add("highlight")}))},n.unhighlightPieces=function(){document.querySelectorAll(".player-piece.highlight").forEach((function(t){t.classList.remove("highlight")}))},n.setDiceValue=function(t){document.querySelector(".dice-value").innerHTML=t.toString()},n}();function v(t){return"function"==typeof t}function y(t){return t&&v(t.schedule)}function b(t){return t[t.length-1]}function m(t){return y(b(t))?t.pop():void 0}var g=function(t,e){return g=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},g(t,e)};function P(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function n(){this.constructor=t}g(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}function w(t,e){var n,r,i,o,u={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:c(0),throw:c(1),return:c(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function c(c){return function(s){return function(c){if(n)throw new TypeError("Generator is already executing.");for(;o&&(o=0,c[0]&&(u=0)),u;)try{if(n=1,r&&(i=2&c[0]?r.return:c[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,c[1])).done)return i;switch(r=0,i&&(c=[2&c[0],i.value]),c[0]){case 0:case 1:i=c;break;case 4:return u.label++,{value:c[1],done:!1};case 5:u.label++,r=c[1],c=[0];continue;case 7:c=u.ops.pop(),u.trys.pop();continue;default:if(!((i=(i=u.trys).length>0&&i[i.length-1])||6!==c[0]&&2!==c[0])){u=0;continue}if(3===c[0]&&(!i||c[1]>i[0]&&c[1]<i[3])){u.label=c[1];break}if(6===c[0]&&u.label<i[1]){u.label=i[1],i=c;break}if(i&&u.label<i[2]){u.label=i[2],u.ops.push(c);break}i[2]&&u.ops.pop(),u.trys.pop();continue}c=e.call(t,u)}catch(t){c=[6,t],r=0}finally{n=i=0}if(5&c[0])throw c[1];return{value:c[0]?c[1]:void 0,done:!0}}([c,s])}}}function x(t){var e="function"==typeof Symbol&&Symbol.iterator,n=e&&t[e],r=0;if(n)return n.call(t);if(t&&"number"==typeof t.length)return{next:function(){return t&&r>=t.length&&(t=void 0),{value:t&&t[r++],done:!t}}};throw new TypeError(e?"Object is not iterable.":"Symbol.iterator is not defined.")}function _(t,e){var n="function"==typeof Symbol&&t[Symbol.iterator];if(!n)return t;var r,i,o=n.call(t),u=[];try{for(;(void 0===e||e-- >0)&&!(r=o.next()).done;)u.push(r.value)}catch(t){i={error:t}}finally{try{r&&!r.done&&(n=o.return)&&n.call(o)}finally{if(i)throw i.error}}return u}function S(t,e,n){if(n||2===arguments.length)for(var r,i=0,o=e.length;i<o;i++)!r&&i in e||(r||(r=Array.prototype.slice.call(e,0,i)),r[i]=e[i]);return t.concat(r||Array.prototype.slice.call(e))}function E(t){return this instanceof E?(this.v=t,this):new E(t)}Object.create,Object.create,"function"==typeof SuppressedError&&SuppressedError;var k=function(t){return t&&"number"==typeof t.length&&"function"!=typeof t};function I(t){return v(null==t?void 0:t.then)}var A,T=((A=function(t){var e;e=this,Error.call(e),e.stack=(new Error).stack,this.message=t?t.length+" errors occurred during unsubscription:\n"+t.map((function(t,e){return e+1+") "+t.toString()})).join("\n  "):"",this.name="UnsubscriptionError",this.errors=t}).prototype=Object.create(Error.prototype),A.prototype.constructor=A,A);function O(t,e){if(t){var n=t.indexOf(e);0<=n&&t.splice(n,1)}}var D=function(){function t(t){this.initialTeardown=t,this.closed=!1,this._parentage=null,this._finalizers=null}return t.prototype.unsubscribe=function(){var t,e,n,r,i;if(!this.closed){this.closed=!0;var o=this._parentage;if(o)if(this._parentage=null,Array.isArray(o))try{for(var u=x(o),c=u.next();!c.done;c=u.next())c.value.remove(this)}catch(e){t={error:e}}finally{try{c&&!c.done&&(e=u.return)&&e.call(u)}finally{if(t)throw t.error}}else o.remove(this);var s=this.initialTeardown;if(v(s))try{s()}catch(t){i=t instanceof T?t.errors:[t]}var l=this._finalizers;if(l){this._finalizers=null;try{for(var a=x(l),f=a.next();!f.done;f=a.next()){var h=f.value;try{C(h)}catch(t){i=null!=i?i:[],t instanceof T?i=S(S([],_(i)),_(t.errors)):i.push(t)}}}catch(t){n={error:t}}finally{try{f&&!f.done&&(r=a.return)&&r.call(a)}finally{if(n)throw n.error}}}if(i)throw new T(i)}},t.prototype.add=function(e){var n;if(e&&e!==this)if(this.closed)C(e);else{if(e instanceof t){if(e.closed||e._hasParent(this))return;e._addParent(this)}(this._finalizers=null!==(n=this._finalizers)&&void 0!==n?n:[]).push(e)}},t.prototype._hasParent=function(t){var e=this._parentage;return e===t||Array.isArray(e)&&e.includes(t)},t.prototype._addParent=function(t){var e=this._parentage;this._parentage=Array.isArray(e)?(e.push(t),e):e?[e,t]:t},t.prototype._removeParent=function(t){var e=this._parentage;e===t?this._parentage=null:Array.isArray(e)&&O(e,t)},t.prototype.remove=function(e){var n=this._finalizers;n&&O(n,e),e instanceof t&&e._removeParent(this)},t.EMPTY=((e=new t).closed=!0,e),t;var e}();function j(t){return t instanceof D||t&&"closed"in t&&v(t.remove)&&v(t.add)&&v(t.unsubscribe)}function C(t){v(t)?t():t.unsubscribe()}D.EMPTY;var L={onUnhandledError:null,onStoppedNotification:null,Promise:void 0,useDeprecatedSynchronousErrorHandling:!1,useDeprecatedNextContext:!1},q={setTimeout:function(t,e){for(var n=[],r=2;r<arguments.length;r++)n[r-2]=arguments[r];var i=q.delegate;return(null==i?void 0:i.setTimeout)?i.setTimeout.apply(i,S([t,e],_(n))):setTimeout.apply(void 0,S([t,e],_(n)))},clearTimeout:function(t){var e=q.delegate;return((null==e?void 0:e.clearTimeout)||clearTimeout)(t)},delegate:void 0};function V(t){q.setTimeout((function(){var e=L.onUnhandledError;if(!e)throw t;e(t)}))}function z(){}var N=F("C",void 0,void 0);function F(t,e,n){return{kind:t,value:e,error:n}}var R=null,U=function(t){function e(e){var n=t.call(this)||this;return n.isStopped=!1,e?(n.destination=e,j(e)&&e.add(n)):n.destination=B,n}return P(e,t),e.create=function(t,e,n){return new G(t,e,n)},e.prototype.next=function(t){this.isStopped?W(function(t){return F("N",t,void 0)}(t),this):this._next(t)},e.prototype.error=function(t){this.isStopped?W(F("E",void 0,t),this):(this.isStopped=!0,this._error(t))},e.prototype.complete=function(){this.isStopped?W(N,this):(this.isStopped=!0,this._complete())},e.prototype.unsubscribe=function(){this.closed||(this.isStopped=!0,t.prototype.unsubscribe.call(this),this.destination=null)},e.prototype._next=function(t){this.destination.next(t)},e.prototype._error=function(t){try{this.destination.error(t)}finally{this.unsubscribe()}},e.prototype._complete=function(){try{this.destination.complete()}finally{this.unsubscribe()}},e}(D),H=Function.prototype.bind;function M(t,e){return H.call(t,e)}var Y=function(){function t(t){this.partialObserver=t}return t.prototype.next=function(t){var e=this.partialObserver;if(e.next)try{e.next(t)}catch(t){K(t)}},t.prototype.error=function(t){var e=this.partialObserver;if(e.error)try{e.error(t)}catch(t){K(t)}else K(t)},t.prototype.complete=function(){var t=this.partialObserver;if(t.complete)try{t.complete()}catch(t){K(t)}},t}(),G=function(t){function e(e,n,r){var i,o,u=t.call(this)||this;return v(e)||!e?i={next:null!=e?e:void 0,error:null!=n?n:void 0,complete:null!=r?r:void 0}:u&&L.useDeprecatedNextContext?((o=Object.create(e)).unsubscribe=function(){return u.unsubscribe()},i={next:e.next&&M(e.next,o),error:e.error&&M(e.error,o),complete:e.complete&&M(e.complete,o)}):i=e,u.destination=new Y(i),u}return P(e,t),e}(U);function K(t){var e;L.useDeprecatedSynchronousErrorHandling?(e=t,L.useDeprecatedSynchronousErrorHandling&&R&&(R.errorThrown=!0,R.error=e)):V(t)}function W(t,e){var n=L.onStoppedNotification;n&&q.setTimeout((function(){return n(t,e)}))}var B={closed:!0,next:z,error:function(t){throw t},complete:z},J="function"==typeof Symbol&&Symbol.observable||"@@observable";function Q(t){return t}var X=function(){function t(t){t&&(this._subscribe=t)}return t.prototype.lift=function(e){var n=new t;return n.source=this,n.operator=e,n},t.prototype.subscribe=function(t,e,n){var r,i=this,o=(r=t)&&r instanceof U||function(t){return t&&v(t.next)&&v(t.error)&&v(t.complete)}(r)&&j(r)?t:new G(t,e,n);return function(t){if(L.useDeprecatedSynchronousErrorHandling){var e=!R;if(e&&(R={errorThrown:!1,error:null}),t(),e){var n=R,r=n.errorThrown,i=n.error;if(R=null,r)throw i}}else t()}((function(){var t=i,e=t.operator,n=t.source;o.add(e?e.call(o,n):n?i._subscribe(o):i._trySubscribe(o))})),o},t.prototype._trySubscribe=function(t){try{return this._subscribe(t)}catch(e){t.error(e)}},t.prototype.forEach=function(t,e){var n=this;return new(e=Z(e))((function(e,r){var i=new G({next:function(e){try{t(e)}catch(t){r(t),i.unsubscribe()}},error:r,complete:e});n.subscribe(i)}))},t.prototype._subscribe=function(t){var e;return null===(e=this.source)||void 0===e?void 0:e.subscribe(t)},t.prototype[J]=function(){return this},t.prototype.pipe=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return(0===(n=t).length?Q:1===n.length?n[0]:function(t){return n.reduce((function(t,e){return e(t)}),t)})(this);var n},t.prototype.toPromise=function(t){var e=this;return new(t=Z(t))((function(t,n){var r;e.subscribe((function(t){return r=t}),(function(t){return n(t)}),(function(){return t(r)}))}))},t.create=function(e){return new t(e)},t}();function Z(t){var e;return null!==(e=null!=t?t:L.Promise)&&void 0!==e?e:Promise}function $(t){return v(t[J])}function tt(t){return Symbol.asyncIterator&&v(null==t?void 0:t[Symbol.asyncIterator])}function et(t){return new TypeError("You provided "+(null!==t&&"object"==typeof t?"an invalid object":"'"+t+"'")+" where a stream was expected. You can provide an Observable, Promise, ReadableStream, Array, AsyncIterable, or Iterable.")}var nt="function"==typeof Symbol&&Symbol.iterator?Symbol.iterator:"@@iterator";function rt(t){return v(null==t?void 0:t[nt])}function it(t){return function(t,e,n){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var r,i=n.apply(t,e||[]),o=[];return r={},u("next"),u("throw"),u("return"),r[Symbol.asyncIterator]=function(){return this},r;function u(t){i[t]&&(r[t]=function(e){return new Promise((function(n,r){o.push([t,e,n,r])>1||c(t,e)}))})}function c(t,e){try{(n=i[t](e)).value instanceof E?Promise.resolve(n.value.v).then(s,l):a(o[0][2],n)}catch(t){a(o[0][3],t)}var n}function s(t){c("next",t)}function l(t){c("throw",t)}function a(t,e){t(e),o.shift(),o.length&&c(o[0][0],o[0][1])}}(this,arguments,(function(){var e,n,r;return w(this,(function(i){switch(i.label){case 0:e=t.getReader(),i.label=1;case 1:i.trys.push([1,,9,10]),i.label=2;case 2:return[4,E(e.read())];case 3:return n=i.sent(),r=n.value,n.done?[4,E(void 0)]:[3,5];case 4:return[2,i.sent()];case 5:return[4,E(r)];case 6:return[4,i.sent()];case 7:return i.sent(),[3,2];case 8:return[3,10];case 9:return e.releaseLock(),[7];case 10:return[2]}}))}))}function ot(t){return v(null==t?void 0:t.getReader)}function ut(t){if(t instanceof X)return t;if(null!=t){if($(t))return i=t,new X((function(t){var e=i[J]();if(v(e.subscribe))return e.subscribe(t);throw new TypeError("Provided object does not correctly implement Symbol.observable")}));if(k(t))return r=t,new X((function(t){for(var e=0;e<r.length&&!t.closed;e++)t.next(r[e]);t.complete()}));if(I(t))return n=t,new X((function(t){n.then((function(e){t.closed||(t.next(e),t.complete())}),(function(e){return t.error(e)})).then(null,V)}));if(tt(t))return ct(t);if(rt(t))return e=t,new X((function(t){var n,r;try{for(var i=x(e),o=i.next();!o.done;o=i.next()){var u=o.value;if(t.next(u),t.closed)return}}catch(t){n={error:t}}finally{try{o&&!o.done&&(r=i.return)&&r.call(i)}finally{if(n)throw n.error}}t.complete()}));if(ot(t))return ct(it(t))}var e,n,r,i;throw et(t)}function ct(t){return new X((function(e){(function(t,e){var n,r,i,o,u,c,s,l;return u=this,c=void 0,l=function(){var u,c;return w(this,(function(s){switch(s.label){case 0:s.trys.push([0,5,6,11]),n=function(t){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var e,n=t[Symbol.asyncIterator];return n?n.call(t):(t=x(t),e={},r("next"),r("throw"),r("return"),e[Symbol.asyncIterator]=function(){return this},e);function r(n){e[n]=t[n]&&function(e){return new Promise((function(r,i){!function(t,e,n,r){Promise.resolve(r).then((function(e){t({value:e,done:n})}),e)}(r,i,(e=t[n](e)).done,e.value)}))}}}(t),s.label=1;case 1:return[4,n.next()];case 2:if((r=s.sent()).done)return[3,4];if(u=r.value,e.next(u),e.closed)return[2];s.label=3;case 3:return[3,1];case 4:return[3,11];case 5:return c=s.sent(),i={error:c},[3,11];case 6:return s.trys.push([6,,9,10]),r&&!r.done&&(o=n.return)?[4,o.call(n)]:[3,8];case 7:s.sent(),s.label=8;case 8:return[3,10];case 9:if(i)throw i.error;return[7];case 10:return[7];case 11:return e.complete(),[2]}}))},new((s=void 0)||(s=Promise))((function(t,e){function n(t){try{i(l.next(t))}catch(t){e(t)}}function r(t){try{i(l.throw(t))}catch(t){e(t)}}function i(e){var i;e.done?t(e.value):(i=e.value,i instanceof s?i:new s((function(t){t(i)}))).then(n,r)}i((l=l.apply(u,c||[])).next())}))})(t,e).catch((function(t){return e.error(t)}))}))}function st(t,e,n,r,i){void 0===r&&(r=0),void 0===i&&(i=!1);var o=e.schedule((function(){n(),i?t.add(this.schedule(null,r)):this.unsubscribe()}),r);if(t.add(o),!i)return o}function lt(t){return function(e){if(function(t){return v(null==t?void 0:t.lift)}(e))return e.lift((function(e){try{return t(e,this)}catch(t){this.error(t)}}));throw new TypeError("Unable to lift unknown Observable type")}}function at(t,e,n,r,i){return new ft(t,e,n,r,i)}var ft=function(t){function e(e,n,r,i,o,u){var c=t.call(this,e)||this;return c.onFinalize=o,c.shouldUnsubscribe=u,c._next=n?function(t){try{n(t)}catch(t){e.error(t)}}:t.prototype._next,c._error=i?function(t){try{i(t)}catch(t){e.error(t)}finally{this.unsubscribe()}}:t.prototype._error,c._complete=r?function(){try{r()}catch(t){e.error(t)}finally{this.unsubscribe()}}:t.prototype._complete,c}return P(e,t),e.prototype.unsubscribe=function(){var e;if(!this.shouldUnsubscribe||this.shouldUnsubscribe()){var n=this.closed;t.prototype.unsubscribe.call(this),!n&&(null===(e=this.onFinalize)||void 0===e||e.call(this))}},e}(U);function ht(t,e){return void 0===e&&(e=0),lt((function(n,r){n.subscribe(at(r,(function(n){return st(r,t,(function(){return r.next(n)}),e)}),(function(){return st(r,t,(function(){return r.complete()}),e)}),(function(n){return st(r,t,(function(){return r.error(n)}),e)})))}))}function pt(t,e){return void 0===e&&(e=0),lt((function(n,r){r.add(t.schedule((function(){return n.subscribe(r)}),e))}))}function dt(t,e){if(!t)throw new Error("Iterable cannot be null");return new X((function(n){st(n,e,(function(){var r=t[Symbol.asyncIterator]();st(n,e,(function(){r.next().then((function(t){t.done?n.complete():n.next(t.value)}))}),0,!0)}))}))}function vt(t,e){return e?function(t,e){if(null!=t){if($(t))return function(t,e){return ut(t).pipe(pt(e),ht(e))}(t,e);if(k(t))return function(t,e){return new X((function(n){var r=0;return e.schedule((function(){r===t.length?n.complete():(n.next(t[r++]),n.closed||this.schedule())}))}))}(t,e);if(I(t))return function(t,e){return ut(t).pipe(pt(e),ht(e))}(t,e);if(tt(t))return dt(t,e);if(rt(t))return function(t,e){return new X((function(n){var r;return st(n,e,(function(){r=t[nt](),st(n,e,(function(){var t,e,i;try{e=(t=r.next()).value,i=t.done}catch(t){return void n.error(t)}i?n.complete():n.next(e)}),0,!0)})),function(){return v(null==r?void 0:r.return)&&r.return()}}))}(t,e);if(ot(t))return function(t,e){return dt(it(t),e)}(t,e)}throw et(t)}(t,e):ut(t)}function yt(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return vt(t,m(t))}function bt(t,e){return lt((function(n,r){var i=0;n.subscribe(at(r,(function(n){r.next(t.call(e,n,i++))})))}))}function mt(t,e,n){return void 0===n&&(n=1/0),v(e)?mt((function(n,r){return bt((function(t,i){return e(n,t,r,i)}))(ut(t(n,r)))}),n):("number"==typeof e&&(n=e),lt((function(e,r){return function(t,e,n,r,i,o,u,c){var s=[],l=0,a=0,f=!1,h=function(){!f||s.length||l||e.complete()},p=function(t){return l<r?d(t):s.push(t)},d=function(t){l++;var i=!1;ut(n(t,a++)).subscribe(at(e,(function(t){e.next(t)}),(function(){i=!0}),void 0,(function(){if(i)try{l--;for(;s.length&&l<r;)t=void 0,t=s.shift(),d(t);h()}catch(t){e.error(t)}var t})))};return t.subscribe(at(e,p,(function(){f=!0,h()}))),function(){}}(e,r,t,n)})))}var gt=new X((function(t){return t.complete()}));function Pt(t,e,n){var r=v(t)||e||n?{next:t,error:e,complete:n}:t;return r?lt((function(t,e){var n;null===(n=r.subscribe)||void 0===n||n.call(r);var i=!0;t.subscribe(at(e,(function(t){var n;null===(n=r.next)||void 0===n||n.call(r,t),e.next(t)}),(function(){var t;i=!1,null===(t=r.complete)||void 0===t||t.call(r),e.complete()}),(function(t){var n;i=!1,null===(n=r.error)||void 0===n||n.call(r,t),e.error(t)}),(function(){var t,e;i&&(null===(t=r.unsubscribe)||void 0===t||t.call(r)),null===(e=r.finalize)||void 0===e||e.call(r)})))})):Q}var wt=Array.isArray;function xt(t){return bt((function(e){return function(t,e){return wt(e)?t.apply(void 0,S([],_(e))):t(e)}(t,e)}))}var _t=["addListener","removeListener"],St=["addEventListener","removeEventListener"],Et=["on","off"];function kt(t,e,n,r){if(v(n)&&(r=n,n=void 0),r)return kt(t,e,n).pipe(xt(r));var i=_(function(t){return v(t.addEventListener)&&v(t.removeEventListener)}(t)?St.map((function(r){return function(i){return t[r](e,i,n)}})):function(t){return v(t.addListener)&&v(t.removeListener)}(t)?_t.map(It(t,e)):function(t){return v(t.on)&&v(t.off)}(t)?Et.map(It(t,e)):[],2),o=i[0],u=i[1];if(!o&&k(t))return mt((function(t){return kt(t,e,n)}))(ut(t));if(!o)throw new TypeError("Invalid event target");return new X((function(t){var e=function(){for(var e=[],n=0;n<arguments.length;n++)e[n]=arguments[n];return t.next(1<e.length?e:e[0])};return o(e),function(){return u(e)}}))}function It(t,e){return function(n){return function(r){return t[n](e,r)}}}var At=function(t){function e(e,n){return t.call(this)||this}return P(e,t),e.prototype.schedule=function(t,e){return void 0===e&&(e=0),this},e}(D),Tt={setInterval:function(t,e){for(var n=[],r=2;r<arguments.length;r++)n[r-2]=arguments[r];var i=Tt.delegate;return(null==i?void 0:i.setInterval)?i.setInterval.apply(i,S([t,e],_(n))):setInterval.apply(void 0,S([t,e],_(n)))},clearInterval:function(t){var e=Tt.delegate;return((null==e?void 0:e.clearInterval)||clearInterval)(t)},delegate:void 0},Ot=function(t){function e(e,n){var r=t.call(this,e,n)||this;return r.scheduler=e,r.work=n,r.pending=!1,r}return P(e,t),e.prototype.schedule=function(t,e){var n;if(void 0===e&&(e=0),this.closed)return this;this.state=t;var r=this.id,i=this.scheduler;return null!=r&&(this.id=this.recycleAsyncId(i,r,e)),this.pending=!0,this.delay=e,this.id=null!==(n=this.id)&&void 0!==n?n:this.requestAsyncId(i,this.id,e),this},e.prototype.requestAsyncId=function(t,e,n){return void 0===n&&(n=0),Tt.setInterval(t.flush.bind(t,this),n)},e.prototype.recycleAsyncId=function(t,e,n){if(void 0===n&&(n=0),null!=n&&this.delay===n&&!1===this.pending)return e;null!=e&&Tt.clearInterval(e)},e.prototype.execute=function(t,e){if(this.closed)return new Error("executing a cancelled action");this.pending=!1;var n=this._execute(t,e);if(n)return n;!1===this.pending&&null!=this.id&&(this.id=this.recycleAsyncId(this.scheduler,this.id,null))},e.prototype._execute=function(t,e){var n,r=!1;try{this.work(t)}catch(t){r=!0,n=t||new Error("Scheduled action threw falsy error")}if(r)return this.unsubscribe(),n},e.prototype.unsubscribe=function(){if(!this.closed){var e=this.id,n=this.scheduler,r=n.actions;this.work=this.state=this.scheduler=null,this.pending=!1,O(r,this),null!=e&&(this.id=this.recycleAsyncId(n,e,null)),this.delay=null,t.prototype.unsubscribe.call(this)}},e}(At),Dt={now:function(){return(Dt.delegate||Date).now()},delegate:void 0},jt=function(){function t(e,n){void 0===n&&(n=t.now),this.schedulerActionCtor=e,this.now=n}return t.prototype.schedule=function(t,e,n){return void 0===e&&(e=0),new this.schedulerActionCtor(this,t).schedule(n,e)},t.now=Dt.now,t}(),Ct=new(function(t){function e(e,n){void 0===n&&(n=jt.now);var r=t.call(this,e,n)||this;return r.actions=[],r._active=!1,r}return P(e,t),e.prototype.flush=function(t){var e=this.actions;if(this._active)e.push(t);else{var n;this._active=!0;do{if(n=t.execute(t.state,t.delay))break}while(t=e.shift());if(this._active=!1,n){for(;t=e.shift();)t.unsubscribe();throw n}}},e}(jt))(Ot),Lt=Ct,qt=Array.isArray,Vt=Object.getPrototypeOf,zt=Object.prototype,Nt=Object.keys;function Ft(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var n=m(t),r=function(t){return v(b(t))?t.pop():void 0}(t),i=function(t){if(1===t.length){var e=t[0];if(qt(e))return{args:e,keys:null};if((r=e)&&"object"==typeof r&&Vt(r)===zt){var n=Nt(e);return{args:n.map((function(t){return e[t]})),keys:n}}}var r;return{args:t,keys:null}}(t),o=i.args,u=i.keys;if(0===o.length)return vt([],n);var c=new X(function(t,e,n){return void 0===n&&(n=Q),function(r){Rt(e,(function(){for(var i=t.length,o=new Array(i),u=i,c=i,s=function(i){Rt(e,(function(){var s=vt(t[i],e),l=!1;s.subscribe(at(r,(function(t){o[i]=t,l||(l=!0,c--),c||r.next(n(o.slice()))}),(function(){--u||r.complete()})))}),r)},l=0;l<i;l++)s(l)}),r)}}(o,n,u?function(t){return function(t,e){return t.reduce((function(t,n,r){return t[n]=e[r],t}),{})}(u,t)}:Q));return r?c.pipe(xt(r)):c}function Rt(t,e,n){t?st(n,t,e):e()}function Ut(t,e){return lt((function(n,r){var i=null,o=0,u=!1,c=function(){return u&&!i&&r.complete()};n.subscribe(at(r,(function(n){null==i||i.unsubscribe();var u=0,s=o++;ut(t(n,s)).subscribe(i=at(r,(function(t){return r.next(e?e(n,t,s,u++):t)}),(function(){i=null,c()})))}),(function(){u=!0,c()})))}))}(new(function(){function t(){this.currentPositions={P1:[],P2:[]}}return t.prototype.startGame=function(){var t=this;this.listenDiceClick().subscribe((function(){return t.onDiceClick()})),this.listenPieceClick().subscribe();var e=this.listenResetClick();(function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var n=m(t),r=function(t,e){return"number"==typeof b(t)?t.pop():1/0}(t),i=t;return i.length?1===i.length?ut(i[0]):function(t){return void 0===t&&(t=1/0),mt(Q,t)}(r)(vt(i,n)):gt})(yt(null),e).pipe(Pt((function(){return t.setStartPosition("P1")})),Pt((function(){return t.setStartPosition("P2")}))).subscribe()},t.prototype.getPlayers=function(t){return vt(fetch("http://localhost:3000/players/"+t).then((function(t){if(t.ok)return t.json();throw new Error("Player not found")})).catch((function(t){return console.log(t)})))},t.prototype.listenDiceClick=function(){var t;return kt(a,"click").pipe((300,void 0===t&&(t=Ct),lt((function(e,n){var r=null,i=null,o=null,u=function(){if(r){r.unsubscribe(),r=null;var t=i;i=null,n.next(t)}};function c(){var e=o+300,i=t.now();if(i<e)return r=this.schedule(void 0,e-i),void n.add(r);u()}e.subscribe(at(n,(function(e){i=e,o=t.now(),r||(r=t.schedule(c,300),n.add(r))}),(function(){u(),n.complete()}),void 0,(function(){i=r=null})))}))))},t.prototype.listenResetClick=function(){var t=this;return kt(f,"click").pipe(Pt((function(){t.setStartPosition("P1"),t.setStartPosition("P2")})))},t.prototype.setStartPosition=function(t){var e=this;Ft([vt([t]),vt([0,1,2,3])]).pipe(bt((function(t){var r=t[0],i=t[1];return e.currentPositions=structuredClone(n),e.setPiecePosition(r,i,n[r][i]),null}))).subscribe({complete:function(){e.turn=0,e.state=s}})},t.prototype.listenPieceClick=function(){var t,e=this;return kt(h,"click").pipe((t=function(t){return t.target.classList.contains("player-piece")},lt((function(e,n){var r=0;e.subscribe(at(n,(function(e){return t.call(undefined,e,r++)&&n.next(e)})))}))),bt((function(t){var e=t.target;return{player:e.getAttribute("player-id"),piece:e.getAttribute("piece")}})),Ut((function(t){var n=t.player,r=t.piece;return e.handlePieceClick(n,r)})))},t.prototype.handlePieceClick=function(t,e){var i=this;return yt(t).pipe(bt((function(){return parseInt(e,10)})),Ut((function(e){if(0===i.turn&&"P1"===t||1==i.turn&&"P2"===t){var o=i.currentPositions[t][e];if(!n[t].includes(o)||6!==i.diceValue||i.state!==l)return i.state!==l||n[t].includes(o)?yt(null):i.movePiece(t,e,i.diceValue);i.setPiecePosition(t,e,r[t]),i.state=s}return yt(null)})))},t.prototype.setPiecePosition=function(t,e,n){this.currentPositions[t][e]=n,d.setPiecePosition(t,e,n)},t.prototype.movePiece=function(t,e,n){var r,i,o,u,c,l,a,f=this;return(l=200,void 0===l&&(l=0),void 0===a&&(a=Ct),l<0&&(l=0),function(t,e,n){void 0===t&&(t=0),void 0===n&&(n=Lt);var r=-1;return null!=e&&(y(e)?n=e:r=e),new X((function(e){var i,o=(i=t)instanceof Date&&!isNaN(i)?+t-n.now():t;o<0&&(o=0);var u=0;return n.schedule((function(){e.closed||(e.next(u++),0<=r?this.schedule(void 0,r):e.complete())}),o)}))}(l,l,a)).pipe((u=function(){return n>0},void 0===c&&(c=!1),lt((function(t,e){t.subscribe(at(e,(function(t){var n=u(0);(n||c)&&e.next(t),!n&&e.complete()})))}))),(i=function(){return f.incrementPiecePosition(t,e),n--,yt(null)},v(o)?mt(i,o,1):mt(i,1)),(r=function(){if(0===n)if(f.hasPlayerWon(t)){var r=0===f._turn?"P1":"P2";f.getPlayers(r).subscribe((function(t){alert("Player ".concat(r," has won and got ").concat(2*t.bet))})),f.setStartPosition("P1"),f.setStartPosition("P2")}else f.checkForKill(t,e)||6===f.diceValue?f.state=s:f.changeTurn()},lt((function(t,e){try{t.subscribe(e)}finally{e.add(r)}}))))},t.prototype.getEligiblePieces=function(t){var e=this;return yt([0,1,2,3]).pipe(bt((function(r){return r.filter((function(r){var u=e.currentPositions[t][r];return!(u===o[t]||n[t].includes(u)&&6!==e.diceValue||i[t].includes(u)&&e._diceValue>o[t]-u)}))})))},t.prototype.incrementPiecePosition=function(t,e){this.setPiecePosition(t,e,this.getIncrementedPosition(t,e))},t.prototype.getIncrementedPosition=function(t,e){var n=this.currentPositions[t][e];return n===u[t]?i[t][0]:51===n?0:n+1},t.prototype.changeTurn=function(){this.turn=0===this.turn?1:0,this.state=s},t.prototype.checkForEligiblePieces=function(){var t=this,n=e[this.turn];"P1"!==n&&"P2"!==n||this.getEligiblePieces(n).subscribe((function(e){var r=e;console.log(r),r.length?d.highlightPieces(n,r):t.changeTurn()}))},t.prototype.hasPlayerWon=function(t){var e=this;return[0,1].every((function(n){return e.currentPositions[t][n]===o[t]}))},t.prototype.checkForKill=function(t,e){var r=this,i=this.currentPositions[t][e],o="P1"===t?"P2":"P1",u=!1;return[0,1,2,3].forEach((function(t){var e=r.currentPositions[o][t];i!==e||c.includes(i)||(r.setPiecePosition(o,t,n[o][t]),u=!0)})),u},t.prototype.onDiceClick=function(){this.diceValue=Math.floor(6*Math.random())+1,this.state=l,this.checkForEligiblePieces()},Object.defineProperty(t.prototype,"diceValue",{get:function(){return this._diceValue},set:function(t){this._diceValue=t,d.setDiceValue(t)},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"turn",{get:function(){return this._turn},set:function(t){this._turn=t,d.setTurn(t)},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"state",{get:function(){return this._state},set:function(t){this._state=t,t===s?(d.enableDice(),d.unhighlightPieces()):d.disableDice()},enumerable:!1,configurable:!0}),t}())).startGame()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,