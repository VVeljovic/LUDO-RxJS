(()=>{"use strict";var e=function(t,n){return e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])},e(t,n)};function t(t,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}function n(e,t){var n,r,i,o,c={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:u(0),throw:u(1),return:u(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function u(u){return function(s){return function(u){if(n)throw new TypeError("Generator is already executing.");for(;o&&(o=0,u[0]&&(c=0)),c;)try{if(n=1,r&&(i=2&u[0]?r.return:u[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,u[1])).done)return i;switch(r=0,i&&(u=[2&u[0],i.value]),u[0]){case 0:case 1:i=u;break;case 4:return c.label++,{value:u[1],done:!1};case 5:c.label++,r=u[1],u=[0];continue;case 7:u=c.ops.pop(),c.trys.pop();continue;default:if(!((i=(i=c.trys).length>0&&i[i.length-1])||6!==u[0]&&2!==u[0])){c=0;continue}if(3===u[0]&&(!i||u[1]>i[0]&&u[1]<i[3])){c.label=u[1];break}if(6===u[0]&&c.label<i[1]){c.label=i[1],i=u;break}if(i&&c.label<i[2]){c.label=i[2],c.ops.push(u);break}i[2]&&c.ops.pop(),c.trys.pop();continue}u=t.call(e,c)}catch(e){u=[6,e],r=0}finally{n=i=0}if(5&u[0])throw u[1];return{value:u[0]?u[1]:void 0,done:!0}}([u,s])}}}function r(e){var t="function"==typeof Symbol&&Symbol.iterator,n=t&&e[t],r=0;if(n)return n.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&r>=e.length&&(e=void 0),{value:e&&e[r++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")}function i(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,i,o=n.call(e),c=[];try{for(;(void 0===t||t-- >0)&&!(r=o.next()).done;)c.push(r.value)}catch(e){i={error:e}}finally{try{r&&!r.done&&(n=o.return)&&n.call(o)}finally{if(i)throw i.error}}return c}function o(e,t,n){if(n||2===arguments.length)for(var r,i=0,o=t.length;i<o;i++)!r&&i in t||(r||(r=Array.prototype.slice.call(t,0,i)),r[i]=t[i]);return e.concat(r||Array.prototype.slice.call(t))}function c(e){return this instanceof c?(this.v=e,this):new c(e)}Object.create,Object.create,"function"==typeof SuppressedError&&SuppressedError;var u=function(e){return e&&"number"==typeof e.length&&"function"!=typeof e};function s(e){return"function"==typeof e}function l(e){return s(null==e?void 0:e.then)}var a,f=((a=function(e){var t;t=this,Error.call(t),t.stack=(new Error).stack,this.message=e?e.length+" errors occurred during unsubscription:\n"+e.map((function(e,t){return t+1+") "+e.toString()})).join("\n  "):"",this.name="UnsubscriptionError",this.errors=e}).prototype=Object.create(Error.prototype),a.prototype.constructor=a,a);function h(e,t){if(e){var n=e.indexOf(t);0<=n&&e.splice(n,1)}}var p=function(){function e(e){this.initialTeardown=e,this.closed=!1,this._parentage=null,this._finalizers=null}var t;return e.prototype.unsubscribe=function(){var e,t,n,c,u;if(!this.closed){this.closed=!0;var l=this._parentage;if(l)if(this._parentage=null,Array.isArray(l))try{for(var a=r(l),h=a.next();!h.done;h=a.next())h.value.remove(this)}catch(t){e={error:t}}finally{try{h&&!h.done&&(t=a.return)&&t.call(a)}finally{if(e)throw e.error}}else l.remove(this);var p=this.initialTeardown;if(s(p))try{p()}catch(e){u=e instanceof f?e.errors:[e]}var d=this._finalizers;if(d){this._finalizers=null;try{for(var y=r(d),b=y.next();!b.done;b=y.next()){var m=b.value;try{v(m)}catch(e){u=null!=u?u:[],e instanceof f?u=o(o([],i(u)),i(e.errors)):u.push(e)}}}catch(e){n={error:e}}finally{try{b&&!b.done&&(c=y.return)&&c.call(y)}finally{if(n)throw n.error}}}if(u)throw new f(u)}},e.prototype.add=function(t){var n;if(t&&t!==this)if(this.closed)v(t);else{if(t instanceof e){if(t.closed||t._hasParent(this))return;t._addParent(this)}(this._finalizers=null!==(n=this._finalizers)&&void 0!==n?n:[]).push(t)}},e.prototype._hasParent=function(e){var t=this._parentage;return t===e||Array.isArray(t)&&t.includes(e)},e.prototype._addParent=function(e){var t=this._parentage;this._parentage=Array.isArray(t)?(t.push(e),t):t?[t,e]:e},e.prototype._removeParent=function(e){var t=this._parentage;t===e?this._parentage=null:Array.isArray(t)&&h(t,e)},e.prototype.remove=function(t){var n=this._finalizers;n&&h(n,t),t instanceof e&&t._removeParent(this)},e.EMPTY=((t=new e).closed=!0,t),e}();function d(e){return e instanceof p||e&&"closed"in e&&s(e.remove)&&s(e.add)&&s(e.unsubscribe)}function v(e){s(e)?e():e.unsubscribe()}p.EMPTY;var y={onUnhandledError:null,onStoppedNotification:null,Promise:void 0,useDeprecatedSynchronousErrorHandling:!1,useDeprecatedNextContext:!1},b={setTimeout:function(e,t){for(var n=[],r=2;r<arguments.length;r++)n[r-2]=arguments[r];var c=b.delegate;return(null==c?void 0:c.setTimeout)?c.setTimeout.apply(c,o([e,t],i(n))):setTimeout.apply(void 0,o([e,t],i(n)))},clearTimeout:function(e){var t=b.delegate;return((null==t?void 0:t.clearTimeout)||clearTimeout)(e)},delegate:void 0};function m(e){b.setTimeout((function(){var t=y.onUnhandledError;if(!t)throw e;t(e)}))}function g(){}var P=w("C",void 0,void 0);function w(e,t,n){return{kind:e,value:t,error:n}}var x=null,_=function(e){function n(t){var n=e.call(this)||this;return n.isStopped=!1,t?(n.destination=t,d(t)&&t.add(n)):n.destination=C,n}return t(n,e),n.create=function(e,t,n){return new I(e,t,n)},n.prototype.next=function(e){this.isStopped?A(function(e){return w("N",e,void 0)}(e),this):this._next(e)},n.prototype.error=function(e){this.isStopped?A(w("E",void 0,e),this):(this.isStopped=!0,this._error(e))},n.prototype.complete=function(){this.isStopped?A(P,this):(this.isStopped=!0,this._complete())},n.prototype.unsubscribe=function(){this.closed||(this.isStopped=!0,e.prototype.unsubscribe.call(this),this.destination=null)},n.prototype._next=function(e){this.destination.next(e)},n.prototype._error=function(e){try{this.destination.error(e)}finally{this.unsubscribe()}},n.prototype._complete=function(){try{this.destination.complete()}finally{this.unsubscribe()}},n}(p),S=Function.prototype.bind;function k(e,t){return S.call(e,t)}var E=function(){function e(e){this.partialObserver=e}return e.prototype.next=function(e){var t=this.partialObserver;if(t.next)try{t.next(e)}catch(e){T(e)}},e.prototype.error=function(e){var t=this.partialObserver;if(t.error)try{t.error(e)}catch(e){T(e)}else T(e)},e.prototype.complete=function(){var e=this.partialObserver;if(e.complete)try{e.complete()}catch(e){T(e)}},e}(),I=function(e){function n(t,n,r){var i,o,c=e.call(this)||this;return s(t)||!t?i={next:null!=t?t:void 0,error:null!=n?n:void 0,complete:null!=r?r:void 0}:c&&y.useDeprecatedNextContext?((o=Object.create(t)).unsubscribe=function(){return c.unsubscribe()},i={next:t.next&&k(t.next,o),error:t.error&&k(t.error,o),complete:t.complete&&k(t.complete,o)}):i=t,c.destination=new E(i),c}return t(n,e),n}(_);function T(e){var t;y.useDeprecatedSynchronousErrorHandling?(t=e,y.useDeprecatedSynchronousErrorHandling&&x&&(x.errorThrown=!0,x.error=t)):m(e)}function A(e,t){var n=y.onStoppedNotification;n&&b.setTimeout((function(){return n(e,t)}))}var C={closed:!0,next:g,error:function(e){throw e},complete:g},O="function"==typeof Symbol&&Symbol.observable||"@@observable";function D(e){return e}var L=function(){function e(e){e&&(this._subscribe=e)}return e.prototype.lift=function(t){var n=new e;return n.source=this,n.operator=t,n},e.prototype.subscribe=function(e,t,n){var r,i=this,o=(r=e)&&r instanceof _||function(e){return e&&s(e.next)&&s(e.error)&&s(e.complete)}(r)&&d(r)?e:new I(e,t,n);return function(e){if(y.useDeprecatedSynchronousErrorHandling){var t=!x;if(t&&(x={errorThrown:!1,error:null}),e(),t){var n=x,r=n.errorThrown,i=n.error;if(x=null,r)throw i}}else e()}((function(){var e=i,t=e.operator,n=e.source;o.add(t?t.call(o,n):n?i._subscribe(o):i._trySubscribe(o))})),o},e.prototype._trySubscribe=function(e){try{return this._subscribe(e)}catch(t){e.error(t)}},e.prototype.forEach=function(e,t){var n=this;return new(t=j(t))((function(t,r){var i=new I({next:function(t){try{e(t)}catch(e){r(e),i.unsubscribe()}},error:r,complete:t});n.subscribe(i)}))},e.prototype._subscribe=function(e){var t;return null===(t=this.source)||void 0===t?void 0:t.subscribe(e)},e.prototype[O]=function(){return this},e.prototype.pipe=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return(0===(n=e).length?D:1===n.length?n[0]:function(e){return n.reduce((function(e,t){return t(e)}),e)})(this);var n},e.prototype.toPromise=function(e){var t=this;return new(e=j(e))((function(e,n){var r;t.subscribe((function(e){return r=e}),(function(e){return n(e)}),(function(){return e(r)}))}))},e.create=function(t){return new e(t)},e}();function j(e){var t;return null!==(t=null!=e?e:y.Promise)&&void 0!==t?t:Promise}function q(e){return s(e[O])}function V(e){return Symbol.asyncIterator&&s(null==e?void 0:e[Symbol.asyncIterator])}function z(e){return new TypeError("You provided "+(null!==e&&"object"==typeof e?"an invalid object":"'"+e+"'")+" where a stream was expected. You can provide an Observable, Promise, ReadableStream, Array, AsyncIterable, or Iterable.")}var F="function"==typeof Symbol&&Symbol.iterator?Symbol.iterator:"@@iterator";function M(e){return s(null==e?void 0:e[F])}function N(e){return function(e,t,n){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var r,i=n.apply(e,t||[]),o=[];return r={},u("next"),u("throw"),u("return"),r[Symbol.asyncIterator]=function(){return this},r;function u(e){i[e]&&(r[e]=function(t){return new Promise((function(n,r){o.push([e,t,n,r])>1||s(e,t)}))})}function s(e,t){try{(n=i[e](t)).value instanceof c?Promise.resolve(n.value.v).then(l,a):f(o[0][2],n)}catch(e){f(o[0][3],e)}var n}function l(e){s("next",e)}function a(e){s("throw",e)}function f(e,t){e(t),o.shift(),o.length&&s(o[0][0],o[0][1])}}(this,arguments,(function(){var t,r,i;return n(this,(function(n){switch(n.label){case 0:t=e.getReader(),n.label=1;case 1:n.trys.push([1,,9,10]),n.label=2;case 2:return[4,c(t.read())];case 3:return r=n.sent(),i=r.value,r.done?[4,c(void 0)]:[3,5];case 4:return[2,n.sent()];case 5:return[4,c(i)];case 6:return[4,n.sent()];case 7:return n.sent(),[3,2];case 8:return[3,10];case 9:return t.releaseLock(),[7];case 10:return[2]}}))}))}function R(e){return s(null==e?void 0:e.getReader)}function U(e){if(e instanceof L)return e;if(null!=e){if(q(e))return o=e,new L((function(e){var t=o[O]();if(s(t.subscribe))return t.subscribe(e);throw new TypeError("Provided object does not correctly implement Symbol.observable")}));if(u(e))return i=e,new L((function(e){for(var t=0;t<i.length&&!e.closed;t++)e.next(i[t]);e.complete()}));if(l(e))return n=e,new L((function(e){n.then((function(t){e.closed||(e.next(t),e.complete())}),(function(t){return e.error(t)})).then(null,m)}));if(V(e))return G(e);if(M(e))return t=e,new L((function(e){var n,i;try{for(var o=r(t),c=o.next();!c.done;c=o.next()){var u=c.value;if(e.next(u),e.closed)return}}catch(e){n={error:e}}finally{try{c&&!c.done&&(i=o.return)&&i.call(o)}finally{if(n)throw n.error}}e.complete()}));if(R(e))return G(N(e))}var t,n,i,o;throw z(e)}function G(e){return new L((function(t){(function(e,t){var i,o,c,u,s,l,a,f;return s=this,l=void 0,f=function(){var s,l;return n(this,(function(n){switch(n.label){case 0:n.trys.push([0,5,6,11]),i=function(e){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var t,n=e[Symbol.asyncIterator];return n?n.call(e):(e=r(e),t={},i("next"),i("throw"),i("return"),t[Symbol.asyncIterator]=function(){return this},t);function i(n){t[n]=e[n]&&function(t){return new Promise((function(r,i){!function(e,t,n,r){Promise.resolve(r).then((function(t){e({value:t,done:n})}),t)}(r,i,(t=e[n](t)).done,t.value)}))}}}(e),n.label=1;case 1:return[4,i.next()];case 2:if((o=n.sent()).done)return[3,4];if(s=o.value,t.next(s),t.closed)return[2];n.label=3;case 3:return[3,1];case 4:return[3,11];case 5:return l=n.sent(),c={error:l},[3,11];case 6:return n.trys.push([6,,9,10]),o&&!o.done&&(u=i.return)?[4,u.call(i)]:[3,8];case 7:n.sent(),n.label=8;case 8:return[3,10];case 9:if(c)throw c.error;return[7];case 10:return[7];case 11:return t.complete(),[2]}}))},new((a=void 0)||(a=Promise))((function(e,t){function n(e){try{i(f.next(e))}catch(e){t(e)}}function r(e){try{i(f.throw(e))}catch(e){t(e)}}function i(t){var i;t.done?e(t.value):(i=t.value,i instanceof a?i:new a((function(e){e(i)}))).then(n,r)}i((f=f.apply(s,l||[])).next())}))})(e,t).catch((function(e){return t.error(e)}))}))}function H(e){return function(t){if(function(e){return s(null==e?void 0:e.lift)}(t))return t.lift((function(t){try{return e(t,this)}catch(e){this.error(e)}}));throw new TypeError("Unable to lift unknown Observable type")}}function Y(e,t,n,r,i){return new K(e,t,n,r,i)}var K=function(e){function n(t,n,r,i,o,c){var u=e.call(this,t)||this;return u.onFinalize=o,u.shouldUnsubscribe=c,u._next=n?function(e){try{n(e)}catch(e){t.error(e)}}:e.prototype._next,u._error=i?function(e){try{i(e)}catch(e){t.error(e)}finally{this.unsubscribe()}}:e.prototype._error,u._complete=r?function(){try{r()}catch(e){t.error(e)}finally{this.unsubscribe()}}:e.prototype._complete,u}return t(n,e),n.prototype.unsubscribe=function(){var t;if(!this.shouldUnsubscribe||this.shouldUnsubscribe()){var n=this.closed;e.prototype.unsubscribe.call(this),!n&&(null===(t=this.onFinalize)||void 0===t||t.call(this))}},n}(_);function W(e,t){return H((function(n,r){var i=0;n.subscribe(Y(r,(function(n){r.next(e.call(t,n,i++))})))}))}function B(e,t,n,r,i){void 0===r&&(r=0),void 0===i&&(i=!1);var o=t.schedule((function(){n(),i?e.add(this.schedule(null,r)):this.unsubscribe()}),r);if(e.add(o),!i)return o}function J(e,t,n){return void 0===n&&(n=1/0),s(t)?J((function(n,r){return W((function(e,i){return t(n,e,r,i)}))(U(e(n,r)))}),n):("number"==typeof t&&(n=t),H((function(t,r){return function(e,t,n,r,i,o,c,u){var s=[],l=0,a=0,f=!1,h=function(){!f||s.length||l||t.complete()},p=function(e){return l<r?d(e):s.push(e)},d=function(e){l++;var i=!1;U(n(e,a++)).subscribe(Y(t,(function(e){t.next(e)}),(function(){i=!0}),void 0,(function(){if(i)try{l--;for(;s.length&&l<r;)e=void 0,e=s.shift(),d(e);h()}catch(e){t.error(e)}var e})))};return e.subscribe(Y(t,p,(function(){f=!0,h()}))),function(){}}(t,r,e,n)})))}var Q=Array.isArray;var X=["addListener","removeListener"],Z=["addEventListener","removeEventListener"],$=["on","off"];function ee(e,t,n,r){if(s(n)&&(r=n,n=void 0),r)return ee(e,t,n).pipe((c=r,W((function(e){return function(e,t){return Q(t)?e.apply(void 0,o([],i(t))):e(t)}(c,e)}))));var c,l=i(function(e){return s(e.addEventListener)&&s(e.removeEventListener)}(e)?Z.map((function(r){return function(i){return e[r](t,i,n)}})):function(e){return s(e.addListener)&&s(e.removeListener)}(e)?X.map(te(e,t)):function(e){return s(e.on)&&s(e.off)}(e)?$.map(te(e,t)):[],2),a=l[0],f=l[1];if(!a&&u(e))return J((function(e){return ee(e,t,n)}))(U(e));if(!a)throw new TypeError("Invalid event target");return new L((function(e){var t=function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];return e.next(1<t.length?t:t[0])};return a(t),function(){return f(t)}}))}function te(e,t){return function(n){return function(r){return e[n](t,r)}}}var ne={0:[6,13],1:[6,12],2:[6,11],3:[6,10],4:[6,9],5:[5,8],6:[4,8],7:[3,8],8:[2,8],9:[1,8],10:[0,8],11:[0,7],12:[0,6],13:[1,6],14:[2,6],15:[3,6],16:[4,6],17:[5,6],18:[6,5],19:[6,4],20:[6,3],21:[6,2],22:[6,1],23:[6,0],24:[7,0],25:[8,0],26:[8,1],27:[8,2],28:[8,3],29:[8,4],30:[8,5],31:[9,6],32:[10,6],33:[11,6],34:[12,6],35:[13,6],36:[14,6],37:[14,7],38:[14,8],39:[13,8],40:[12,8],41:[11,8],42:[10,8],43:[9,8],44:[8,9],45:[8,10],46:[8,11],47:[8,12],48:[8,13],49:[8,14],50:[7,14],51:[6,14],100:[7,13],101:[7,12],102:[7,11],103:[7,10],104:[7,9],105:[7,8],200:[7,1],201:[7,2],202:[7,3],203:[7,4],204:[7,5],205:[7,6],500:[1.5,10.58],501:[3.57,10.58],502:[1.5,12.43],503:[3.57,12.43],600:[10.5,1.58],601:[12.54,1.58],602:[10.5,3.45],603:[12.54,3.45]},re=["P1","P2"],ie={P1:[500,501,502,503],P2:[600,601,602,603]},oe={P1:0,P2:26},ce={P1:[100,101,102,103,104],P2:[200,201,202,203,204]},ue={P1:105,P2:205},se={P1:50,P2:24},le=[0,8,13,21,26,34,39,47],ae="DICE_NOT_ROLLED",fe="DICE_ROLLED",he=document.querySelector("#dice-btn"),pe=document.querySelector("button#reset-btn"),de=document.querySelector(".player-pieces"),ve={P1:document.querySelectorAll('[player-id="P1"].player-piece'),P2:document.querySelectorAll('[player-id="P2"].player-piece')},ye=function(){function e(){}return e.listenDiceClick=function(e){ee(he,"click").subscribe(e)},e.listenResetClick=function(e){ee(pe,"click").subscribe(e)},e.listenPieceClick=function(e){ee(de,"click").subscribe(e)},e.setPiecePosition=function(e,t,n){ve[e]&&ve[e][t]||console.log("greska");var r=ne[n],i=r[0],o=r[1],c=ve[e][t];c.style.top=6.66*o+"%",c.style.left=6.66*i+"%"},e.setTurn=function(e){if(e<0||e>re.length)console.error("index out of bound");else{var t=re[e];document.querySelector(".active-player span").innerText=t;var n=document.querySelector(".player-base.highlight");n&&n.classList.remove("highlight"),document.querySelector('[player-id="'.concat(t,'"].player-base')).classList.add("highlight")}},e.enableDice=function(){he.removeAttribute("disabled")},e.disableDice=function(){he.setAttribute("disabled","")},e.highlightPieces=function(e,t){t.forEach((function(t){ve[e][t].classList.add("highlight")}))},e.unhighlightPieces=function(){document.querySelectorAll(".player-piece.highlight").forEach((function(e){e.classList.remove("highlight")}))},e.setDiceValue=function(e){document.querySelector(".dice-value").innerHTML=e.toString()},e}();function be(e,t){return void 0===t&&(t=0),H((function(n,r){n.subscribe(Y(r,(function(n){return B(r,e,(function(){return r.next(n)}),t)}),(function(){return B(r,e,(function(){return r.complete()}),t)}),(function(n){return B(r,e,(function(){return r.error(n)}),t)})))}))}function me(e,t){return void 0===t&&(t=0),H((function(n,r){r.add(e.schedule((function(){return n.subscribe(r)}),t))}))}function ge(e,t){if(!e)throw new Error("Iterable cannot be null");return new L((function(n){B(n,t,(function(){var r=e[Symbol.asyncIterator]();B(n,t,(function(){r.next().then((function(e){e.done?n.complete():n.next(e.value)}))}),0,!0)}))}))}function Pe(e,t){return t?function(e,t){if(null!=e){if(q(e))return function(e,t){return U(e).pipe(me(t),be(t))}(e,t);if(u(e))return function(e,t){return new L((function(n){var r=0;return t.schedule((function(){r===e.length?n.complete():(n.next(e[r++]),n.closed||this.schedule())}))}))}(e,t);if(l(e))return function(e,t){return U(e).pipe(me(t),be(t))}(e,t);if(V(e))return ge(e,t);if(M(e))return function(e,t){return new L((function(n){var r;return B(n,t,(function(){r=e[F](),B(n,t,(function(){var e,t,i;try{t=(e=r.next()).value,i=e.done}catch(e){return void n.error(e)}i?n.complete():n.next(t)}),0,!0)})),function(){return s(null==r?void 0:r.return)&&r.return()}}))}(e,t);if(R(e))return function(e,t){return ge(N(e),t)}(e,t)}throw z(e)}(e,t):U(e)}var we=function(e){function n(t,n){return e.call(this)||this}return t(n,e),n.prototype.schedule=function(e,t){return void 0===t&&(t=0),this},n}(p),xe={setInterval:function(e,t){for(var n=[],r=2;r<arguments.length;r++)n[r-2]=arguments[r];var c=xe.delegate;return(null==c?void 0:c.setInterval)?c.setInterval.apply(c,o([e,t],i(n))):setInterval.apply(void 0,o([e,t],i(n)))},clearInterval:function(e){var t=xe.delegate;return((null==t?void 0:t.clearInterval)||clearInterval)(e)},delegate:void 0},_e=function(e){function n(t,n){var r=e.call(this,t,n)||this;return r.scheduler=t,r.work=n,r.pending=!1,r}return t(n,e),n.prototype.schedule=function(e,t){var n;if(void 0===t&&(t=0),this.closed)return this;this.state=e;var r=this.id,i=this.scheduler;return null!=r&&(this.id=this.recycleAsyncId(i,r,t)),this.pending=!0,this.delay=t,this.id=null!==(n=this.id)&&void 0!==n?n:this.requestAsyncId(i,this.id,t),this},n.prototype.requestAsyncId=function(e,t,n){return void 0===n&&(n=0),xe.setInterval(e.flush.bind(e,this),n)},n.prototype.recycleAsyncId=function(e,t,n){if(void 0===n&&(n=0),null!=n&&this.delay===n&&!1===this.pending)return t;null!=t&&xe.clearInterval(t)},n.prototype.execute=function(e,t){if(this.closed)return new Error("executing a cancelled action");this.pending=!1;var n=this._execute(e,t);if(n)return n;!1===this.pending&&null!=this.id&&(this.id=this.recycleAsyncId(this.scheduler,this.id,null))},n.prototype._execute=function(e,t){var n,r=!1;try{this.work(e)}catch(e){r=!0,n=e||new Error("Scheduled action threw falsy error")}if(r)return this.unsubscribe(),n},n.prototype.unsubscribe=function(){if(!this.closed){var t=this.id,n=this.scheduler,r=n.actions;this.work=this.state=this.scheduler=null,this.pending=!1,h(r,this),null!=t&&(this.id=this.recycleAsyncId(n,t,null)),this.delay=null,e.prototype.unsubscribe.call(this)}},n}(we),Se={now:function(){return(Se.delegate||Date).now()},delegate:void 0},ke=function(){function e(t,n){void 0===n&&(n=e.now),this.schedulerActionCtor=t,this.now=n}return e.prototype.schedule=function(e,t,n){return void 0===t&&(t=0),new this.schedulerActionCtor(this,e).schedule(n,t)},e.now=Se.now,e}(),Ee=new(function(e){function n(t,n){void 0===n&&(n=ke.now);var r=e.call(this,t,n)||this;return r.actions=[],r._active=!1,r}return t(n,e),n.prototype.flush=function(e){var t=this.actions;if(this._active)t.push(e);else{var n;this._active=!0;do{if(n=e.execute(e.state,e.delay))break}while(e=t.shift());if(this._active=!1,n){for(;e=t.shift();)e.unsubscribe();throw n}}},n}(ke))(_e),Ie=Ee;function Te(e){return e&&s(e.schedule)}new(function(){function e(){var e=this;this.currentPositions={P1:[],P2:[]},this.resetGame=new L((function(t){console.log("reset game"),e.currentPositions=structuredClone(ie),Pe(re).pipe(J((function(t){return Pe([0,1,2,3]).pipe(W((function(n){"P1"!==t&&"P2"!==t||e.setPiecePosition(t,n,e.currentPositions[t][n])})))}))).subscribe({complete:function(){e.turn=0,e.state=ae,t.complete()}})})),this.listenDiceClick(),this.listenResetClick(),this.listenPieceClick(),this.resetGame.subscribe()}return Object.defineProperty(e.prototype,"diceValue",{get:function(){return this._diceValue},set:function(e){this._diceValue=e,ye.setDiceValue(e)},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"turn",{get:function(){return this._turn},set:function(e){this._turn=e,ye.setTurn(e)},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"state",{get:function(){return this._state},set:function(e){this._state=e,e===ae?(ye.enableDice(),ye.unhighlightPieces()):ye.disableDice()},enumerable:!1,configurable:!0}),e.prototype.listenDiceClick=function(){var e=this;ee(he,"click").pipe(W((function(){return Math.floor(7*Math.random())}))).subscribe((function(t){console.log("dice clicked"),e.diceValue=t,e.state=fe,e.checkForEligiblePieces()}))},e.prototype.onDiceClick=function(){console.log("dice clicked"),this.diceValue=Math.floor(7*Math.random()),this.state=fe,this.checkForEligiblePieces()},e.prototype.checkForEligiblePieces=function(){var e=re[this.turn];if("P1"===e||"P2"===e){var t=this.getEligiblePieces(e);t.length?ye.highlightPieces(e,t):this.changeTurn()}},e.prototype.changeTurn=function(){this.turn=0===this.turn?1:0,this.state=ae},e.prototype.getEligiblePieces=function(e){var t=this;return[0,1,2,3].filter((function(n){var r=t.currentPositions[e][n];return!(r==ue[e]||ie[e].includes(r)&&6!==t.diceValue||ce[e].includes(r)&&t._diceValue>ue[e]-r)}))},e.prototype.listenResetClick=function(){var e,t,n,r,i=this;ee(pe,"click").pipe((r=s(e=function(){console.log("reset button clicked"),i.resetGame.subscribe()})?{next:e,error:t,complete:n}:e)?H((function(e,t){var n;null===(n=r.subscribe)||void 0===n||n.call(r);var i=!0;e.subscribe(Y(t,(function(e){var n;null===(n=r.next)||void 0===n||n.call(r,e),t.next(e)}),(function(){var e;i=!1,null===(e=r.complete)||void 0===e||e.call(r),t.complete()}),(function(e){var n;i=!1,null===(n=r.error)||void 0===n||n.call(r,e),t.error(e)}),(function(){var e,t;i&&(null===(e=r.unsubscribe)||void 0===e||e.call(r)),null===(t=r.finalize)||void 0===t||t.call(r)})))})):D).subscribe()},e.prototype.listenPieceClick=function(){var e,t,n,r=this;ee(de,"click").pipe((n=function(e){return e.target.classList.contains("player-piece")},H((function(e,t){var r=0;e.subscribe(Y(t,(function(e){return n.call(undefined,e,r++)&&t.next(e)})))}))),W((function(e){var t=e.target;return{player:t.getAttribute("player-id"),piece:t.getAttribute("piece")}})),(t=function(e){var t=e.player,n=e.piece;return r.handlePieceClick(t,n)},H((function(e,n){var r=null,i=!1,o=function(){return i&&!r&&n.complete()};e.subscribe(Y(n,(function(e){null==r||r.unsubscribe();0;U(t(e)).subscribe(r=Y(n,(function(e){return n.next(e)}),(function(){r=null,o()})))}),(function(){i=!0,o()})))}))),(e=ee(pe,"click"),H((function(t,n){U(e).subscribe(Y(n,(function(){return n.complete()}),g)),!n.closed&&t.subscribe(n)})))).subscribe()},e.prototype.onPieceClick=function(e){var t=e.target;if(t.classList.contains("player-piece")){console.log("piece clicked");var n=t.getAttribute("player-id"),r=t.getAttribute("piece");this.handlePieceClick(n,r)}},e.prototype.handlePieceClick=function(e,t){var n=this;return new L((function(r){console.log(e,t);var i=parseInt(t,10);if("P1"===e||"P2"===e){var o=n.currentPositions[e][i];ie[e].includes(o)?(n.setPiecePosition(e,i,oe[e]),n.state=ae,r.complete()):(ye.unhighlightPieces(),n.movePiece(e,i,n.diceValue).subscribe({complete:function(){r.complete()}}))}else r.complete()}))},e.prototype.setPiecePosition=function(e,t,n){this.currentPositions[e][t]=n,ye.setPiecePosition(e,t,n)},e.prototype.movePiece=function(e,t,n){var r=this;return new L((function(i){var o,c,u,l,a,f,h=(a=200,void 0===a&&(a=0),void 0===f&&(f=Ee),a<0&&(a=0),function(e,t,n){void 0===e&&(e=0),void 0===n&&(n=Ie);var r=-1;return null!=t&&(Te(t)?n=t:r=t),new L((function(t){var i,o=(i=e)instanceof Date&&!isNaN(i)?+e-n.now():e;o<0&&(o=0);var c=0;return n.schedule((function(){t.closed||(t.next(c++),0<=r?this.schedule(void 0,r):t.complete())}),o)}))}(a,a,f)).pipe((u=function(){return n>0},void 0===l&&(l=!1),H((function(e,t){e.subscribe(Y(t,(function(e){var n=u(0);(n||l)&&t.next(e),!n&&t.complete()})))}))),(o=function(){return r.incrementPiecePosition(e,t),0==--n&&(r.hasPlayerWon(e)?(alert("Player:".concat(e," has won!")),r.resetGame.subscribe({complete:function(){i.complete()}})):((r.checkForKill(e,t)||6===r.diceValue)&&(r.state=ae),r.changeTurn(),i.complete())),function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var n=function(e){return Te((t=e)[t.length-1])?e.pop():void 0;var t}(e);return Pe(e,n)}(null)},s(c)?J(o,c,1):J(o,1)));r.movePieceSubscription=h.subscribe()}))},e.prototype.cancelMovePieceSubscription=function(){this.movePieceSubscription&&this.movePieceSubscription.unsubscribe()},e.prototype.checkForKill=function(e,t){var n=this,r=this.currentPositions[e][t],i="P1"===e?"P2":"P1",o=!1;return[0,1,2,3].forEach((function(e){var t=n.currentPositions[i][e];r!==t||le.includes(r)||(n.setPiecePosition(i,e,ie[i][e]),o=!0)})),o},e.prototype.hasPlayerWon=function(e){var t=this;return[0,1,2,3].every((function(n){return t.currentPositions[e][n]===ue[e]}))},e.prototype.incrementPiecePosition=function(e,t){this.setPiecePosition(e,t,this.getIncrementedPosition(e,t))},e.prototype.getIncrementedPosition=function(e,t){var n=this.currentPositions[e][t];return console.log(n),n===se[e]?ce[e][0]:51===n?0:n+1},e}())})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,