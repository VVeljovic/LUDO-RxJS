(()=>{"use strict";var r=function(n,t){return r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(r,n){r.__proto__=n}||function(r,n){for(var t in n)Object.prototype.hasOwnProperty.call(n,t)&&(r[t]=n[t])},r(n,t)};function n(n,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function e(){this.constructor=n}r(n,t),n.prototype=null===t?Object.create(t):(e.prototype=t.prototype,new e)}function t(r,n){var t,e,o,i,u={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:c(0),throw:c(1),return:c(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function c(c){return function(a){return function(c){if(t)throw new TypeError("Generator is already executing.");for(;i&&(i=0,c[0]&&(u=0)),u;)try{if(t=1,e&&(o=2&c[0]?e.return:c[0]?e.throw||((o=e.return)&&o.call(e),0):e.next)&&!(o=o.call(e,c[1])).done)return o;switch(e=0,o&&(c=[2&c[0],o.value]),c[0]){case 0:case 1:o=c;break;case 4:return u.label++,{value:c[1],done:!1};case 5:u.label++,e=c[1],c=[0];continue;case 7:c=u.ops.pop(),u.trys.pop();continue;default:if(!((o=(o=u.trys).length>0&&o[o.length-1])||6!==c[0]&&2!==c[0])){u=0;continue}if(3===c[0]&&(!o||c[1]>o[0]&&c[1]<o[3])){u.label=c[1];break}if(6===c[0]&&u.label<o[1]){u.label=o[1],o=c;break}if(o&&u.label<o[2]){u.label=o[2],u.ops.push(c);break}o[2]&&u.ops.pop(),u.trys.pop();continue}c=n.call(r,u)}catch(r){c=[6,r],e=0}finally{t=o=0}if(5&c[0])throw c[1];return{value:c[0]?c[1]:void 0,done:!0}}([c,a])}}}function e(r){var n="function"==typeof Symbol&&Symbol.iterator,t=n&&r[n],e=0;if(t)return t.call(r);if(r&&"number"==typeof r.length)return{next:function(){return r&&e>=r.length&&(r=void 0),{value:r&&r[e++],done:!r}}};throw new TypeError(n?"Object is not iterable.":"Symbol.iterator is not defined.")}function o(r,n){var t="function"==typeof Symbol&&r[Symbol.iterator];if(!t)return r;var e,o,i=t.call(r),u=[];try{for(;(void 0===n||n-- >0)&&!(e=i.next()).done;)u.push(e.value)}catch(r){o={error:r}}finally{try{e&&!e.done&&(t=i.return)&&t.call(i)}finally{if(o)throw o.error}}return u}function i(r,n,t){if(t||2===arguments.length)for(var e,o=0,i=n.length;o<i;o++)!e&&o in n||(e||(e=Array.prototype.slice.call(n,0,o)),e[o]=n[o]);return r.concat(e||Array.prototype.slice.call(n))}function u(r){return this instanceof u?(this.v=r,this):new u(r)}Object.create,Object.create,"function"==typeof SuppressedError&&SuppressedError;var c=function(r){return r&&"number"==typeof r.length&&"function"!=typeof r};function a(r){return"function"==typeof r}function s(r){return a(null==r?void 0:r.then)}var l,f=((l=function(r){var n;n=this,Error.call(n),n.stack=(new Error).stack,this.message=r?r.length+" errors occurred during unsubscription:\n"+r.map((function(r,n){return n+1+") "+r.toString()})).join("\n  "):"",this.name="UnsubscriptionError",this.errors=r}).prototype=Object.create(Error.prototype),l.prototype.constructor=l,l);function p(r,n){if(r){var t=r.indexOf(n);0<=t&&r.splice(t,1)}}var h=function(){function r(r){this.initialTeardown=r,this.closed=!1,this._parentage=null,this._finalizers=null}var n;return r.prototype.unsubscribe=function(){var r,n,t,u,c;if(!this.closed){this.closed=!0;var s=this._parentage;if(s)if(this._parentage=null,Array.isArray(s))try{for(var l=e(s),p=l.next();!p.done;p=l.next())p.value.remove(this)}catch(n){r={error:n}}finally{try{p&&!p.done&&(n=l.return)&&n.call(l)}finally{if(r)throw r.error}}else s.remove(this);var h=this.initialTeardown;if(a(h))try{h()}catch(r){c=r instanceof f?r.errors:[r]}var v=this._finalizers;if(v){this._finalizers=null;try{for(var y=e(v),b=y.next();!b.done;b=y.next()){var m=b.value;try{d(m)}catch(r){c=null!=c?c:[],r instanceof f?c=i(i([],o(c)),o(r.errors)):c.push(r)}}}catch(r){t={error:r}}finally{try{b&&!b.done&&(u=y.return)&&u.call(y)}finally{if(t)throw t.error}}}if(c)throw new f(c)}},r.prototype.add=function(n){var t;if(n&&n!==this)if(this.closed)d(n);else{if(n instanceof r){if(n.closed||n._hasParent(this))return;n._addParent(this)}(this._finalizers=null!==(t=this._finalizers)&&void 0!==t?t:[]).push(n)}},r.prototype._hasParent=function(r){var n=this._parentage;return n===r||Array.isArray(n)&&n.includes(r)},r.prototype._addParent=function(r){var n=this._parentage;this._parentage=Array.isArray(n)?(n.push(r),n):n?[n,r]:r},r.prototype._removeParent=function(r){var n=this._parentage;n===r?this._parentage=null:Array.isArray(n)&&p(n,r)},r.prototype.remove=function(n){var t=this._finalizers;t&&p(t,n),n instanceof r&&n._removeParent(this)},r.EMPTY=((n=new r).closed=!0,n),r}();function v(r){return r instanceof h||r&&"closed"in r&&a(r.remove)&&a(r.add)&&a(r.unsubscribe)}function d(r){a(r)?r():r.unsubscribe()}h.EMPTY;var y={onUnhandledError:null,onStoppedNotification:null,Promise:void 0,useDeprecatedSynchronousErrorHandling:!1,useDeprecatedNextContext:!1},b={setTimeout:function(r,n){for(var t=[],e=2;e<arguments.length;e++)t[e-2]=arguments[e];var u=b.delegate;return(null==u?void 0:u.setTimeout)?u.setTimeout.apply(u,i([r,n],o(t))):setTimeout.apply(void 0,i([r,n],o(t)))},clearTimeout:function(r){var n=b.delegate;return((null==n?void 0:n.clearTimeout)||clearTimeout)(r)},delegate:void 0};function m(r){b.setTimeout((function(){var n=y.onUnhandledError;if(!n)throw r;n(r)}))}function w(){}var g=x("C",void 0,void 0);function x(r,n,t){return{kind:r,value:n,error:t}}var S=null,_=function(r){function t(n){var t=r.call(this)||this;return t.isStopped=!1,n?(t.destination=n,v(n)&&n.add(t)):t.destination=j,t}return n(t,r),t.create=function(r,n,t){return new I(r,n,t)},t.prototype.next=function(r){this.isStopped?A(function(r){return x("N",r,void 0)}(r),this):this._next(r)},t.prototype.error=function(r){this.isStopped?A(x("E",void 0,r),this):(this.isStopped=!0,this._error(r))},t.prototype.complete=function(){this.isStopped?A(g,this):(this.isStopped=!0,this._complete())},t.prototype.unsubscribe=function(){this.closed||(this.isStopped=!0,r.prototype.unsubscribe.call(this),this.destination=null)},t.prototype._next=function(r){this.destination.next(r)},t.prototype._error=function(r){try{this.destination.error(r)}finally{this.unsubscribe()}},t.prototype._complete=function(){try{this.destination.complete()}finally{this.unsubscribe()}},t}(h),E=Function.prototype.bind;function T(r,n){return E.call(r,n)}var P=function(){function r(r){this.partialObserver=r}return r.prototype.next=function(r){var n=this.partialObserver;if(n.next)try{n.next(r)}catch(r){O(r)}},r.prototype.error=function(r){var n=this.partialObserver;if(n.error)try{n.error(r)}catch(r){O(r)}else O(r)},r.prototype.complete=function(){var r=this.partialObserver;if(r.complete)try{r.complete()}catch(r){O(r)}},r}(),I=function(r){function t(n,t,e){var o,i,u=r.call(this)||this;return a(n)||!n?o={next:null!=n?n:void 0,error:null!=t?t:void 0,complete:null!=e?e:void 0}:u&&y.useDeprecatedNextContext?((i=Object.create(n)).unsubscribe=function(){return u.unsubscribe()},o={next:n.next&&T(n.next,i),error:n.error&&T(n.error,i),complete:n.complete&&T(n.complete,i)}):o=n,u.destination=new P(o),u}return n(t,r),t}(_);function O(r){var n;y.useDeprecatedSynchronousErrorHandling?(n=r,y.useDeprecatedSynchronousErrorHandling&&S&&(S.errorThrown=!0,S.error=n)):m(r)}function A(r,n){var t=y.onStoppedNotification;t&&b.setTimeout((function(){return t(r,n)}))}var j={closed:!0,next:w,error:function(r){throw r},complete:w},k="function"==typeof Symbol&&Symbol.observable||"@@observable";function L(r){return r}var z=function(){function r(r){r&&(this._subscribe=r)}return r.prototype.lift=function(n){var t=new r;return t.source=this,t.operator=n,t},r.prototype.subscribe=function(r,n,t){var e,o=this,i=(e=r)&&e instanceof _||function(r){return r&&a(r.next)&&a(r.error)&&a(r.complete)}(e)&&v(e)?r:new I(r,n,t);return function(r){if(y.useDeprecatedSynchronousErrorHandling){var n=!S;if(n&&(S={errorThrown:!1,error:null}),r(),n){var t=S,e=t.errorThrown,o=t.error;if(S=null,e)throw o}}else r()}((function(){var r=o,n=r.operator,t=r.source;i.add(n?n.call(i,t):t?o._subscribe(i):o._trySubscribe(i))})),i},r.prototype._trySubscribe=function(r){try{return this._subscribe(r)}catch(n){r.error(n)}},r.prototype.forEach=function(r,n){var t=this;return new(n=N(n))((function(n,e){var o=new I({next:function(n){try{r(n)}catch(r){e(r),o.unsubscribe()}},error:e,complete:n});t.subscribe(o)}))},r.prototype._subscribe=function(r){var n;return null===(n=this.source)||void 0===n?void 0:n.subscribe(r)},r.prototype[k]=function(){return this},r.prototype.pipe=function(){for(var r=[],n=0;n<arguments.length;n++)r[n]=arguments[n];return(0===(t=r).length?L:1===t.length?t[0]:function(r){return t.reduce((function(r,n){return n(r)}),r)})(this);var t},r.prototype.toPromise=function(r){var n=this;return new(r=N(r))((function(r,t){var e;n.subscribe((function(r){return e=r}),(function(r){return t(r)}),(function(){return r(e)}))}))},r.create=function(n){return new r(n)},r}();function N(r){var n;return null!==(n=null!=r?r:y.Promise)&&void 0!==n?n:Promise}function C(r){return a(r[k])}function U(r){return Symbol.asyncIterator&&a(null==r?void 0:r[Symbol.asyncIterator])}function D(r){return new TypeError("You provided "+(null!==r&&"object"==typeof r?"an invalid object":"'"+r+"'")+" where a stream was expected. You can provide an Observable, Promise, ReadableStream, Array, AsyncIterable, or Iterable.")}var H="function"==typeof Symbol&&Symbol.iterator?Symbol.iterator:"@@iterator";function M(r){return a(null==r?void 0:r[H])}function B(r){return function(r,n,t){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var e,o=t.apply(r,n||[]),i=[];return e={},c("next"),c("throw"),c("return"),e[Symbol.asyncIterator]=function(){return this},e;function c(r){o[r]&&(e[r]=function(n){return new Promise((function(t,e){i.push([r,n,t,e])>1||a(r,n)}))})}function a(r,n){try{(t=o[r](n)).value instanceof u?Promise.resolve(t.value.v).then(s,l):f(i[0][2],t)}catch(r){f(i[0][3],r)}var t}function s(r){a("next",r)}function l(r){a("throw",r)}function f(r,n){r(n),i.shift(),i.length&&a(i[0][0],i[0][1])}}(this,arguments,(function(){var n,e,o;return t(this,(function(t){switch(t.label){case 0:n=r.getReader(),t.label=1;case 1:t.trys.push([1,,9,10]),t.label=2;case 2:return[4,u(n.read())];case 3:return e=t.sent(),o=e.value,e.done?[4,u(void 0)]:[3,5];case 4:return[2,t.sent()];case 5:return[4,u(o)];case 6:return[4,t.sent()];case 7:return t.sent(),[3,2];case 8:return[3,10];case 9:return n.releaseLock(),[7];case 10:return[2]}}))}))}function R(r){return a(null==r?void 0:r.getReader)}function Y(r){if(r instanceof z)return r;if(null!=r){if(C(r))return i=r,new z((function(r){var n=i[k]();if(a(n.subscribe))return n.subscribe(r);throw new TypeError("Provided object does not correctly implement Symbol.observable")}));if(c(r))return o=r,new z((function(r){for(var n=0;n<o.length&&!r.closed;n++)r.next(o[n]);r.complete()}));if(s(r))return t=r,new z((function(r){t.then((function(n){r.closed||(r.next(n),r.complete())}),(function(n){return r.error(n)})).then(null,m)}));if(U(r))return q(r);if(M(r))return n=r,new z((function(r){var t,o;try{for(var i=e(n),u=i.next();!u.done;u=i.next()){var c=u.value;if(r.next(c),r.closed)return}}catch(r){t={error:r}}finally{try{u&&!u.done&&(o=i.return)&&o.call(i)}finally{if(t)throw t.error}}r.complete()}));if(R(r))return q(B(r))}var n,t,o,i;throw D(r)}function q(r){return new z((function(n){(function(r,n){var o,i,u,c,a,s,l,f;return a=this,s=void 0,f=function(){var a,s;return t(this,(function(t){switch(t.label){case 0:t.trys.push([0,5,6,11]),o=function(r){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var n,t=r[Symbol.asyncIterator];return t?t.call(r):(r=e(r),n={},o("next"),o("throw"),o("return"),n[Symbol.asyncIterator]=function(){return this},n);function o(t){n[t]=r[t]&&function(n){return new Promise((function(e,o){!function(r,n,t,e){Promise.resolve(e).then((function(n){r({value:n,done:t})}),n)}(e,o,(n=r[t](n)).done,n.value)}))}}}(r),t.label=1;case 1:return[4,o.next()];case 2:if((i=t.sent()).done)return[3,4];if(a=i.value,n.next(a),n.closed)return[2];t.label=3;case 3:return[3,1];case 4:return[3,11];case 5:return s=t.sent(),u={error:s},[3,11];case 6:return t.trys.push([6,,9,10]),i&&!i.done&&(c=o.return)?[4,c.call(o)]:[3,8];case 7:t.sent(),t.label=8;case 8:return[3,10];case 9:if(u)throw u.error;return[7];case 10:return[7];case 11:return n.complete(),[2]}}))},new((l=void 0)||(l=Promise))((function(r,n){function t(r){try{o(f.next(r))}catch(r){n(r)}}function e(r){try{o(f.throw(r))}catch(r){n(r)}}function o(n){var o;n.done?r(n.value):(o=n.value,o instanceof l?o:new l((function(r){r(o)}))).then(t,e)}o((f=f.apply(a,s||[])).next())}))})(r,n).catch((function(r){return n.error(r)}))}))}function F(r){return function(n){if(function(r){return a(null==r?void 0:r.lift)}(n))return n.lift((function(n){try{return r(n,this)}catch(r){this.error(r)}}));throw new TypeError("Unable to lift unknown Observable type")}}function G(r,n,t,e,o){return new J(r,n,t,e,o)}var J=function(r){function t(n,t,e,o,i,u){var c=r.call(this,n)||this;return c.onFinalize=i,c.shouldUnsubscribe=u,c._next=t?function(r){try{t(r)}catch(r){n.error(r)}}:r.prototype._next,c._error=o?function(r){try{o(r)}catch(r){n.error(r)}finally{this.unsubscribe()}}:r.prototype._error,c._complete=e?function(){try{e()}catch(r){n.error(r)}finally{this.unsubscribe()}}:r.prototype._complete,c}return n(t,r),t.prototype.unsubscribe=function(){var n;if(!this.shouldUnsubscribe||this.shouldUnsubscribe()){var t=this.closed;r.prototype.unsubscribe.call(this),!t&&(null===(n=this.onFinalize)||void 0===n||n.call(this))}},t}(_);function K(r,n){return F((function(t,e){var o=0;t.subscribe(G(e,(function(t){e.next(r.call(n,t,o++))})))}))}function Q(r,n,t,e,o){void 0===e&&(e=0),void 0===o&&(o=!1);var i=n.schedule((function(){t(),o?r.add(this.schedule(null,e)):this.unsubscribe()}),e);if(r.add(i),!o)return i}function V(r,n,t){return void 0===t&&(t=1/0),a(n)?V((function(t,e){return K((function(r,o){return n(t,r,e,o)}))(Y(r(t,e)))}),t):("number"==typeof n&&(t=n),F((function(n,e){return function(r,n,t,e,o,i,u,c){var a=[],s=0,l=0,f=!1,p=function(){!f||a.length||s||n.complete()},h=function(r){return s<e?v(r):a.push(r)},v=function(r){s++;var o=!1;Y(t(r,l++)).subscribe(G(n,(function(r){n.next(r)}),(function(){o=!0}),void 0,(function(){if(o)try{s--;for(;a.length&&s<e;)r=void 0,r=a.shift(),v(r);p()}catch(r){n.error(r)}var r})))};return r.subscribe(G(n,h,(function(){f=!0,p()}))),function(){}}(n,e,r,t)})))}var W=Array.isArray;function X(r){return K((function(n){return function(r,n){return W(n)?r.apply(void 0,i([],o(n))):r(n)}(r,n)}))}var Z=["addListener","removeListener"],$=["addEventListener","removeEventListener"],rr=["on","off"];function nr(r,n,t,e){if(a(t)&&(e=t,t=void 0),e)return nr(r,n,t).pipe(X(e));var i=o(function(r){return a(r.addEventListener)&&a(r.removeEventListener)}(r)?$.map((function(e){return function(o){return r[e](n,o,t)}})):function(r){return a(r.addListener)&&a(r.removeListener)}(r)?Z.map(tr(r,n)):function(r){return a(r.on)&&a(r.off)}(r)?rr.map(tr(r,n)):[],2),u=i[0],s=i[1];if(!u&&c(r))return V((function(r){return nr(r,n,t)}))(Y(r));if(!u)throw new TypeError("Invalid event target");return new z((function(r){var n=function(){for(var n=[],t=0;t<arguments.length;t++)n[t]=arguments[t];return r.next(1<n.length?n:n[0])};return u(n),function(){return s(n)}}))}function tr(r,n){return function(t){return function(e){return r[t](n,e)}}}function er(r){return r[r.length-1]}function or(r){return(n=er(r))&&a(n.schedule)?r.pop():void 0;var n}function ir(r,n){return void 0===n&&(n=0),F((function(t,e){t.subscribe(G(e,(function(t){return Q(e,r,(function(){return e.next(t)}),n)}),(function(){return Q(e,r,(function(){return e.complete()}),n)}),(function(t){return Q(e,r,(function(){return e.error(t)}),n)})))}))}function ur(r,n){return void 0===n&&(n=0),F((function(t,e){e.add(r.schedule((function(){return t.subscribe(e)}),n))}))}function cr(r,n){if(!r)throw new Error("Iterable cannot be null");return new z((function(t){Q(t,n,(function(){var e=r[Symbol.asyncIterator]();Q(t,n,(function(){e.next().then((function(r){r.done?t.complete():t.next(r.value)}))}),0,!0)}))}))}function ar(r,n){return n?function(r,n){if(null!=r){if(C(r))return function(r,n){return Y(r).pipe(ur(n),ir(n))}(r,n);if(c(r))return function(r,n){return new z((function(t){var e=0;return n.schedule((function(){e===r.length?t.complete():(t.next(r[e++]),t.closed||this.schedule())}))}))}(r,n);if(s(r))return function(r,n){return Y(r).pipe(ur(n),ir(n))}(r,n);if(U(r))return cr(r,n);if(M(r))return function(r,n){return new z((function(t){var e;return Q(t,n,(function(){e=r[H](),Q(t,n,(function(){var r,n,o;try{n=(r=e.next()).value,o=r.done}catch(r){return void t.error(r)}o?t.complete():t.next(n)}),0,!0)})),function(){return a(null==e?void 0:e.return)&&e.return()}}))}(r,n);if(R(r))return function(r,n){return cr(B(r),n)}(r,n)}throw D(r)}(r,n):Y(r)}var sr=Array.isArray,lr=Object.getPrototypeOf,fr=Object.prototype,pr=Object.keys;function hr(r,n,t){r?Q(t,r,n):n()}function vr(){for(var r=[],n=0;n<arguments.length;n++)r[n]=arguments[n];return(void 0===(t=1)&&(t=1/0),V(L,t))(ar(r,or(r)));var t}function dr(){for(var r=[],n=0;n<arguments.length;n++)r[n]=arguments[n];var t=or(r);return F((function(n,e){(t?vr(r,n,t):vr(r,n)).subscribe(e)}))}var yr,br,mr=document.getElementById("player1Input"),wr=document.getElementById("player2Input"),gr=document.getElementById("player1Name"),xr=document.getElementById("player2Name"),Sr=document.getElementById("dice"),_r=1;nr(Sr,"click").pipe((yr=function(){var r=1===_r?gr.innerHTML:xr.innerHTML,n=Math.floor(6*Math.random())+1;return _r=1===_r?2:1,function(){for(var r=[],n=0;n<arguments.length;n++)r[n]=arguments[n];return ar(r,or(r))}({player:r,rollResult:n})},a(br)?V(yr,br,1):V(yr,1))).subscribe((function(r){var n=r.player,t=r.rollResult;console.log("".concat(n," je dobio ").concat(t,".")),6===t&&function(){var r=document.createElement("div");r.className="player-figure red";var n=document.querySelector(".cells.r-start"),t=document.querySelector('div.cells[style*="bottom: 13.32%"][style*="left:40%"]');console.log(t),document.querySelector("body"),console.log(n),t.appendChild(r),console.log(r)}()})),function(){for(var r=[],n=0;n<arguments.length;n++)r[n]=arguments[n];var t=or(r),e=function(r){return a(er(r))?r.pop():void 0}(r),o=function(r){if(1===r.length){var n=r[0];if(sr(n))return{args:n,keys:null};if((e=n)&&"object"==typeof e&&lr(e)===fr){var t=pr(n);return{args:t.map((function(r){return n[r]})),keys:t}}}var e;return{args:r,keys:null}}(r),i=o.args,u=o.keys;if(0===i.length)return ar([],t);var c=new z(function(r,n,t){return void 0===t&&(t=L),function(e){hr(n,(function(){for(var o=r.length,i=new Array(o),u=o,c=o,a=function(o){hr(n,(function(){var a=ar(r[o],n),s=!1;a.subscribe(G(e,(function(r){i[o]=r,s||(s=!0,c--),c||e.next(t(i.slice()))}),(function(){--u||e.complete()})))}),e)},s=0;s<o;s++)a(s)}),e)}}(i,t,u?function(r){return function(r,n){return r.reduce((function(r,t,e){return r[t]=n[e],r}),{})}(u,r)}:L));return e?c.pipe(X(e)):c}([nr(mr,"input").pipe(K((function(r){return r.target.value})),dr("")),nr(wr,"input").pipe(K((function(r){return r.target.value})),dr(""))]).subscribe((function(r){var n=r[0],t=r[1];gr.textContent=" ".concat(n),xr.textContent=" ".concat(t)}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,