(()=>{"use strict";var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};function e(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}function n(t,e){var n,r,i,o,u={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:c(0),throw:c(1),return:c(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function c(c){return function(s){return function(c){if(n)throw new TypeError("Generator is already executing.");for(;o&&(o=0,c[0]&&(u=0)),u;)try{if(n=1,r&&(i=2&c[0]?r.return:c[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,c[1])).done)return i;switch(r=0,i&&(c=[2&c[0],i.value]),c[0]){case 0:case 1:i=c;break;case 4:return u.label++,{value:c[1],done:!1};case 5:u.label++,r=c[1],c=[0];continue;case 7:c=u.ops.pop(),u.trys.pop();continue;default:if(!((i=(i=u.trys).length>0&&i[i.length-1])||6!==c[0]&&2!==c[0])){u=0;continue}if(3===c[0]&&(!i||c[1]>i[0]&&c[1]<i[3])){u.label=c[1];break}if(6===c[0]&&u.label<i[1]){u.label=i[1],i=c;break}if(i&&u.label<i[2]){u.label=i[2],u.ops.push(c);break}i[2]&&u.ops.pop(),u.trys.pop();continue}c=e.call(t,u)}catch(t){c=[6,t],r=0}finally{n=i=0}if(5&c[0])throw c[1];return{value:c[0]?c[1]:void 0,done:!0}}([c,s])}}}function r(t){var e="function"==typeof Symbol&&Symbol.iterator,n=e&&t[e],r=0;if(n)return n.call(t);if(t&&"number"==typeof t.length)return{next:function(){return t&&r>=t.length&&(t=void 0),{value:t&&t[r++],done:!t}}};throw new TypeError(e?"Object is not iterable.":"Symbol.iterator is not defined.")}function i(t,e){var n="function"==typeof Symbol&&t[Symbol.iterator];if(!n)return t;var r,i,o=n.call(t),u=[];try{for(;(void 0===e||e-- >0)&&!(r=o.next()).done;)u.push(r.value)}catch(t){i={error:t}}finally{try{r&&!r.done&&(n=o.return)&&n.call(o)}finally{if(i)throw i.error}}return u}function o(t,e,n){if(n||2===arguments.length)for(var r,i=0,o=e.length;i<o;i++)!r&&i in e||(r||(r=Array.prototype.slice.call(e,0,i)),r[i]=e[i]);return t.concat(r||Array.prototype.slice.call(e))}function u(t){return this instanceof u?(this.v=t,this):new u(t)}Object.create,Object.create,"function"==typeof SuppressedError&&SuppressedError;var c=function(t){return t&&"number"==typeof t.length&&"function"!=typeof t};function s(t){return"function"==typeof t}function l(t){return s(null==t?void 0:t.then)}var a,f=((a=function(t){var e;e=this,Error.call(e),e.stack=(new Error).stack,this.message=t?t.length+" errors occurred during unsubscription:\n"+t.map((function(t,e){return e+1+") "+t.toString()})).join("\n  "):"",this.name="UnsubscriptionError",this.errors=t}).prototype=Object.create(Error.prototype),a.prototype.constructor=a,a);function h(t,e){if(t){var n=t.indexOf(e);0<=n&&t.splice(n,1)}}var p=function(){function t(t){this.initialTeardown=t,this.closed=!1,this._parentage=null,this._finalizers=null}var e;return t.prototype.unsubscribe=function(){var t,e,n,u,c;if(!this.closed){this.closed=!0;var l=this._parentage;if(l)if(this._parentage=null,Array.isArray(l))try{for(var a=r(l),h=a.next();!h.done;h=a.next())h.value.remove(this)}catch(e){t={error:e}}finally{try{h&&!h.done&&(e=a.return)&&e.call(a)}finally{if(t)throw t.error}}else l.remove(this);var p=this.initialTeardown;if(s(p))try{p()}catch(t){c=t instanceof f?t.errors:[t]}var d=this._finalizers;if(d){this._finalizers=null;try{for(var y=r(d),b=y.next();!b.done;b=y.next()){var m=b.value;try{v(m)}catch(t){c=null!=c?c:[],t instanceof f?c=o(o([],i(c)),i(t.errors)):c.push(t)}}}catch(t){n={error:t}}finally{try{b&&!b.done&&(u=y.return)&&u.call(y)}finally{if(n)throw n.error}}}if(c)throw new f(c)}},t.prototype.add=function(e){var n;if(e&&e!==this)if(this.closed)v(e);else{if(e instanceof t){if(e.closed||e._hasParent(this))return;e._addParent(this)}(this._finalizers=null!==(n=this._finalizers)&&void 0!==n?n:[]).push(e)}},t.prototype._hasParent=function(t){var e=this._parentage;return e===t||Array.isArray(e)&&e.includes(t)},t.prototype._addParent=function(t){var e=this._parentage;this._parentage=Array.isArray(e)?(e.push(t),e):e?[e,t]:t},t.prototype._removeParent=function(t){var e=this._parentage;e===t?this._parentage=null:Array.isArray(e)&&h(e,t)},t.prototype.remove=function(e){var n=this._finalizers;n&&h(n,e),e instanceof t&&e._removeParent(this)},t.EMPTY=((e=new t).closed=!0,e),t}();function d(t){return t instanceof p||t&&"closed"in t&&s(t.remove)&&s(t.add)&&s(t.unsubscribe)}function v(t){s(t)?t():t.unsubscribe()}p.EMPTY;var y={onUnhandledError:null,onStoppedNotification:null,Promise:void 0,useDeprecatedSynchronousErrorHandling:!1,useDeprecatedNextContext:!1},b={setTimeout:function(t,e){for(var n=[],r=2;r<arguments.length;r++)n[r-2]=arguments[r];var u=b.delegate;return(null==u?void 0:u.setTimeout)?u.setTimeout.apply(u,o([t,e],i(n))):setTimeout.apply(void 0,o([t,e],i(n)))},clearTimeout:function(t){var e=b.delegate;return((null==e?void 0:e.clearTimeout)||clearTimeout)(t)},delegate:void 0};function m(t){b.setTimeout((function(){var e=y.onUnhandledError;if(!e)throw t;e(t)}))}function g(){}var w=P("C",void 0,void 0);function P(t,e,n){return{kind:t,value:e,error:n}}var x=null,_=function(t){function n(e){var n=t.call(this)||this;return n.isStopped=!1,e?(n.destination=e,d(e)&&e.add(n)):n.destination=O,n}return e(n,t),n.create=function(t,e,n){return new I(t,e,n)},n.prototype.next=function(t){this.isStopped?T(function(t){return P("N",t,void 0)}(t),this):this._next(t)},n.prototype.error=function(t){this.isStopped?T(P("E",void 0,t),this):(this.isStopped=!0,this._error(t))},n.prototype.complete=function(){this.isStopped?T(w,this):(this.isStopped=!0,this._complete())},n.prototype.unsubscribe=function(){this.closed||(this.isStopped=!0,t.prototype.unsubscribe.call(this),this.destination=null)},n.prototype._next=function(t){this.destination.next(t)},n.prototype._error=function(t){try{this.destination.error(t)}finally{this.unsubscribe()}},n.prototype._complete=function(){try{this.destination.complete()}finally{this.unsubscribe()}},n}(p),S=Function.prototype.bind;function k(t,e){return S.call(t,e)}var E=function(){function t(t){this.partialObserver=t}return t.prototype.next=function(t){var e=this.partialObserver;if(e.next)try{e.next(t)}catch(t){A(t)}},t.prototype.error=function(t){var e=this.partialObserver;if(e.error)try{e.error(t)}catch(t){A(t)}else A(t)},t.prototype.complete=function(){var t=this.partialObserver;if(t.complete)try{t.complete()}catch(t){A(t)}},t}(),I=function(t){function n(e,n,r){var i,o,u=t.call(this)||this;return s(e)||!e?i={next:null!=e?e:void 0,error:null!=n?n:void 0,complete:null!=r?r:void 0}:u&&y.useDeprecatedNextContext?((o=Object.create(e)).unsubscribe=function(){return u.unsubscribe()},i={next:e.next&&k(e.next,o),error:e.error&&k(e.error,o),complete:e.complete&&k(e.complete,o)}):i=e,u.destination=new E(i),u}return e(n,t),n}(_);function A(t){var e;y.useDeprecatedSynchronousErrorHandling?(e=t,y.useDeprecatedSynchronousErrorHandling&&x&&(x.errorThrown=!0,x.error=e)):m(t)}function T(t,e){var n=y.onStoppedNotification;n&&b.setTimeout((function(){return n(t,e)}))}var O={closed:!0,next:g,error:function(t){throw t},complete:g},D="function"==typeof Symbol&&Symbol.observable||"@@observable";function C(t){return t}var j=function(){function t(t){t&&(this._subscribe=t)}return t.prototype.lift=function(e){var n=new t;return n.source=this,n.operator=e,n},t.prototype.subscribe=function(t,e,n){var r,i=this,o=(r=t)&&r instanceof _||function(t){return t&&s(t.next)&&s(t.error)&&s(t.complete)}(r)&&d(r)?t:new I(t,e,n);return function(t){if(y.useDeprecatedSynchronousErrorHandling){var e=!x;if(e&&(x={errorThrown:!1,error:null}),t(),e){var n=x,r=n.errorThrown,i=n.error;if(x=null,r)throw i}}else t()}((function(){var t=i,e=t.operator,n=t.source;o.add(e?e.call(o,n):n?i._subscribe(o):i._trySubscribe(o))})),o},t.prototype._trySubscribe=function(t){try{return this._subscribe(t)}catch(e){t.error(e)}},t.prototype.forEach=function(t,e){var n=this;return new(e=L(e))((function(e,r){var i=new I({next:function(e){try{t(e)}catch(t){r(t),i.unsubscribe()}},error:r,complete:e});n.subscribe(i)}))},t.prototype._subscribe=function(t){var e;return null===(e=this.source)||void 0===e?void 0:e.subscribe(t)},t.prototype[D]=function(){return this},t.prototype.pipe=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return(0===(n=t).length?C:1===n.length?n[0]:function(t){return n.reduce((function(t,e){return e(t)}),t)})(this);var n},t.prototype.toPromise=function(t){var e=this;return new(t=L(t))((function(t,n){var r;e.subscribe((function(t){return r=t}),(function(t){return n(t)}),(function(){return t(r)}))}))},t.create=function(e){return new t(e)},t}();function L(t){var e;return null!==(e=null!=t?t:y.Promise)&&void 0!==e?e:Promise}function q(t){return s(t[D])}function V(t){return Symbol.asyncIterator&&s(null==t?void 0:t[Symbol.asyncIterator])}function z(t){return new TypeError("You provided "+(null!==t&&"object"==typeof t?"an invalid object":"'"+t+"'")+" where a stream was expected. You can provide an Observable, Promise, ReadableStream, Array, AsyncIterable, or Iterable.")}var G="function"==typeof Symbol&&Symbol.iterator?Symbol.iterator:"@@iterator";function N(t){return s(null==t?void 0:t[G])}function R(t){return function(t,e,n){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var r,i=n.apply(t,e||[]),o=[];return r={},c("next"),c("throw"),c("return"),r[Symbol.asyncIterator]=function(){return this},r;function c(t){i[t]&&(r[t]=function(e){return new Promise((function(n,r){o.push([t,e,n,r])>1||s(t,e)}))})}function s(t,e){try{(n=i[t](e)).value instanceof u?Promise.resolve(n.value.v).then(l,a):f(o[0][2],n)}catch(t){f(o[0][3],t)}var n}function l(t){s("next",t)}function a(t){s("throw",t)}function f(t,e){t(e),o.shift(),o.length&&s(o[0][0],o[0][1])}}(this,arguments,(function(){var e,r,i;return n(this,(function(n){switch(n.label){case 0:e=t.getReader(),n.label=1;case 1:n.trys.push([1,,9,10]),n.label=2;case 2:return[4,u(e.read())];case 3:return r=n.sent(),i=r.value,r.done?[4,u(void 0)]:[3,5];case 4:return[2,n.sent()];case 5:return[4,u(i)];case 6:return[4,n.sent()];case 7:return n.sent(),[3,2];case 8:return[3,10];case 9:return e.releaseLock(),[7];case 10:return[2]}}))}))}function F(t){return s(null==t?void 0:t.getReader)}function U(t){if(t instanceof j)return t;if(null!=t){if(q(t))return o=t,new j((function(t){var e=o[D]();if(s(e.subscribe))return e.subscribe(t);throw new TypeError("Provided object does not correctly implement Symbol.observable")}));if(c(t))return i=t,new j((function(t){for(var e=0;e<i.length&&!t.closed;e++)t.next(i[e]);t.complete()}));if(l(t))return n=t,new j((function(t){n.then((function(e){t.closed||(t.next(e),t.complete())}),(function(e){return t.error(e)})).then(null,m)}));if(V(t))return H(t);if(N(t))return e=t,new j((function(t){var n,i;try{for(var o=r(e),u=o.next();!u.done;u=o.next()){var c=u.value;if(t.next(c),t.closed)return}}catch(t){n={error:t}}finally{try{u&&!u.done&&(i=o.return)&&i.call(o)}finally{if(n)throw n.error}}t.complete()}));if(F(t))return H(R(t))}var e,n,i,o;throw z(t)}function H(t){return new j((function(e){(function(t,e){var i,o,u,c,s,l,a,f;return s=this,l=void 0,f=function(){var s,l;return n(this,(function(n){switch(n.label){case 0:n.trys.push([0,5,6,11]),i=function(t){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var e,n=t[Symbol.asyncIterator];return n?n.call(t):(t=r(t),e={},i("next"),i("throw"),i("return"),e[Symbol.asyncIterator]=function(){return this},e);function i(n){e[n]=t[n]&&function(e){return new Promise((function(r,i){!function(t,e,n,r){Promise.resolve(r).then((function(e){t({value:e,done:n})}),e)}(r,i,(e=t[n](e)).done,e.value)}))}}}(t),n.label=1;case 1:return[4,i.next()];case 2:if((o=n.sent()).done)return[3,4];if(s=o.value,e.next(s),e.closed)return[2];n.label=3;case 3:return[3,1];case 4:return[3,11];case 5:return l=n.sent(),u={error:l},[3,11];case 6:return n.trys.push([6,,9,10]),o&&!o.done&&(c=i.return)?[4,c.call(i)]:[3,8];case 7:n.sent(),n.label=8;case 8:return[3,10];case 9:if(u)throw u.error;return[7];case 10:return[7];case 11:return e.complete(),[2]}}))},new((a=void 0)||(a=Promise))((function(t,e){function n(t){try{i(f.next(t))}catch(t){e(t)}}function r(t){try{i(f.throw(t))}catch(t){e(t)}}function i(e){var i;e.done?t(e.value):(i=e.value,i instanceof a?i:new a((function(t){t(i)}))).then(n,r)}i((f=f.apply(s,l||[])).next())}))})(t,e).catch((function(t){return e.error(t)}))}))}function M(t){return function(e){if(function(t){return s(null==t?void 0:t.lift)}(e))return e.lift((function(e){try{return t(e,this)}catch(t){this.error(t)}}));throw new TypeError("Unable to lift unknown Observable type")}}function Y(t,e,n,r,i){return new K(t,e,n,r,i)}var K=function(t){function n(e,n,r,i,o,u){var c=t.call(this,e)||this;return c.onFinalize=o,c.shouldUnsubscribe=u,c._next=n?function(t){try{n(t)}catch(t){e.error(t)}}:t.prototype._next,c._error=i?function(t){try{i(t)}catch(t){e.error(t)}finally{this.unsubscribe()}}:t.prototype._error,c._complete=r?function(){try{r()}catch(t){e.error(t)}finally{this.unsubscribe()}}:t.prototype._complete,c}return e(n,t),n.prototype.unsubscribe=function(){var e;if(!this.shouldUnsubscribe||this.shouldUnsubscribe()){var n=this.closed;t.prototype.unsubscribe.call(this),!n&&(null===(e=this.onFinalize)||void 0===e||e.call(this))}},n}(_);function W(t,e){return M((function(n,r){var i=0;n.subscribe(Y(r,(function(n){r.next(t.call(e,n,i++))})))}))}function B(t,e,n,r,i){void 0===r&&(r=0),void 0===i&&(i=!1);var o=e.schedule((function(){n(),i?t.add(this.schedule(null,r)):this.unsubscribe()}),r);if(t.add(o),!i)return o}function J(t,e,n){return void 0===n&&(n=1/0),s(e)?J((function(n,r){return W((function(t,i){return e(n,t,r,i)}))(U(t(n,r)))}),n):("number"==typeof e&&(n=e),M((function(e,r){return function(t,e,n,r,i,o,u,c){var s=[],l=0,a=0,f=!1,h=function(){!f||s.length||l||e.complete()},p=function(t){return l<r?d(t):s.push(t)},d=function(t){l++;var i=!1;U(n(t,a++)).subscribe(Y(e,(function(t){e.next(t)}),(function(){i=!0}),void 0,(function(){if(i)try{l--;for(;s.length&&l<r;)t=void 0,t=s.shift(),d(t);h()}catch(t){e.error(t)}var t})))};return t.subscribe(Y(e,p,(function(){f=!0,h()}))),function(){}}(e,r,t,n)})))}var Q=Array.isArray;function X(t){return W((function(e){return function(t,e){return Q(e)?t.apply(void 0,o([],i(e))):t(e)}(t,e)}))}var Z=["addListener","removeListener"],$=["addEventListener","removeEventListener"],tt=["on","off"];function et(t,e,n,r){if(s(n)&&(r=n,n=void 0),r)return et(t,e,n).pipe(X(r));var o=i(function(t){return s(t.addEventListener)&&s(t.removeEventListener)}(t)?$.map((function(r){return function(i){return t[r](e,i,n)}})):function(t){return s(t.addListener)&&s(t.removeListener)}(t)?Z.map(nt(t,e)):function(t){return s(t.on)&&s(t.off)}(t)?tt.map(nt(t,e)):[],2),u=o[0],l=o[1];if(!u&&c(t))return J((function(t){return et(t,e,n)}))(U(t));if(!u)throw new TypeError("Invalid event target");return new j((function(t){var e=function(){for(var e=[],n=0;n<arguments.length;n++)e[n]=arguments[n];return t.next(1<e.length?e:e[0])};return u(e),function(){return l(e)}}))}function nt(t,e){return function(n){return function(r){return t[n](e,r)}}}var rt={0:[6,13],1:[6,12],2:[6,11],3:[6,10],4:[6,9],5:[5,8],6:[4,8],7:[3,8],8:[2,8],9:[1,8],10:[0,8],11:[0,7],12:[0,6],13:[1,6],14:[2,6],15:[3,6],16:[4,6],17:[5,6],18:[6,5],19:[6,4],20:[6,3],21:[6,2],22:[6,1],23:[6,0],24:[7,0],25:[8,0],26:[8,1],27:[8,2],28:[8,3],29:[8,4],30:[8,5],31:[9,6],32:[10,6],33:[11,6],34:[12,6],35:[13,6],36:[14,6],37:[14,7],38:[14,8],39:[13,8],40:[12,8],41:[11,8],42:[10,8],43:[9,8],44:[8,9],45:[8,10],46:[8,11],47:[8,12],48:[8,13],49:[8,14],50:[7,14],51:[6,14],100:[7,13],101:[7,12],102:[7,11],103:[7,10],104:[7,9],105:[7,8],200:[7,1],201:[7,2],202:[7,3],203:[7,4],204:[7,5],205:[7,6],500:[1.5,10.58],501:[3.57,10.58],502:[1.5,12.43],503:[3.57,12.43],600:[10.5,1.58],601:[12.54,1.58],602:[10.5,3.45],603:[12.54,3.45]},it=["P1","P2"],ot={P1:[500,501,502,503],P2:[600,601,602,603]},ut={P1:0,P2:26},ct={P1:[100,101,102,103,104],P2:[200,201,202,203,204]},st={P1:105,P2:205},lt={P1:50,P2:24},at=[0,8,13,21,26,34,39,47],ft="DICE_NOT_ROLLED",ht=document.querySelector("#dice-btn"),pt=document.querySelector("button#reset-btn"),dt=document.querySelector(".player-pieces"),vt={P1:document.querySelectorAll('[player-id="P1"].player-piece'),P2:document.querySelectorAll('[player-id="P2"].player-piece')},yt=function(){function t(){}return t.listenDiceClick=function(t){et(ht,"click").subscribe(t)},t.listenResetClick=function(t){et(pt,"click").subscribe(t)},t.listenPieceClick=function(t){et(dt,"click").subscribe(t)},t.setPiecePosition=function(t,e,n){vt[t]&&vt[t][e]||console.log("greska");var r=rt[n],i=r[0],o=r[1],u=vt[t][e];u.style.top=6.66*o+"%",u.style.left=6.66*i+"%"},t.setTurn=function(t){if(t<0||t>it.length)console.error("index out of bound");else{var e=it[t];document.querySelector(".active-player span").innerText=e;var n=document.querySelector(".player-base.highlight");n&&n.classList.remove("highlight"),document.querySelector('[player-id="'.concat(e,'"].player-base')).classList.add("highlight")}},t.enableDice=function(){ht.removeAttribute("disabled")},t.disableDice=function(){ht.setAttribute("disabled","")},t.highlightPieces=function(t,e){e.forEach((function(e){vt[t][e].classList.add("highlight")}))},t.unhighlightPieces=function(){document.querySelectorAll(".player-piece.highlight").forEach((function(t){t.classList.remove("highlight")}))},t.setDiceValue=function(t){document.querySelector(".dice-value").innerHTML=t.toString()},t}(),bt=function(t){function n(e,n){return t.call(this)||this}return e(n,t),n.prototype.schedule=function(t,e){return void 0===e&&(e=0),this},n}(p),mt={setInterval:function(t,e){for(var n=[],r=2;r<arguments.length;r++)n[r-2]=arguments[r];var u=mt.delegate;return(null==u?void 0:u.setInterval)?u.setInterval.apply(u,o([t,e],i(n))):setInterval.apply(void 0,o([t,e],i(n)))},clearInterval:function(t){var e=mt.delegate;return((null==e?void 0:e.clearInterval)||clearInterval)(t)},delegate:void 0},gt=function(t){function n(e,n){var r=t.call(this,e,n)||this;return r.scheduler=e,r.work=n,r.pending=!1,r}return e(n,t),n.prototype.schedule=function(t,e){var n;if(void 0===e&&(e=0),this.closed)return this;this.state=t;var r=this.id,i=this.scheduler;return null!=r&&(this.id=this.recycleAsyncId(i,r,e)),this.pending=!0,this.delay=e,this.id=null!==(n=this.id)&&void 0!==n?n:this.requestAsyncId(i,this.id,e),this},n.prototype.requestAsyncId=function(t,e,n){return void 0===n&&(n=0),mt.setInterval(t.flush.bind(t,this),n)},n.prototype.recycleAsyncId=function(t,e,n){if(void 0===n&&(n=0),null!=n&&this.delay===n&&!1===this.pending)return e;null!=e&&mt.clearInterval(e)},n.prototype.execute=function(t,e){if(this.closed)return new Error("executing a cancelled action");this.pending=!1;var n=this._execute(t,e);if(n)return n;!1===this.pending&&null!=this.id&&(this.id=this.recycleAsyncId(this.scheduler,this.id,null))},n.prototype._execute=function(t,e){var n,r=!1;try{this.work(t)}catch(t){r=!0,n=t||new Error("Scheduled action threw falsy error")}if(r)return this.unsubscribe(),n},n.prototype.unsubscribe=function(){if(!this.closed){var e=this.id,n=this.scheduler,r=n.actions;this.work=this.state=this.scheduler=null,this.pending=!1,h(r,this),null!=e&&(this.id=this.recycleAsyncId(n,e,null)),this.delay=null,t.prototype.unsubscribe.call(this)}},n}(bt),wt={now:function(){return(wt.delegate||Date).now()},delegate:void 0},Pt=function(){function t(e,n){void 0===n&&(n=t.now),this.schedulerActionCtor=e,this.now=n}return t.prototype.schedule=function(t,e,n){return void 0===e&&(e=0),new this.schedulerActionCtor(this,t).schedule(n,e)},t.now=wt.now,t}(),xt=new(function(t){function n(e,n){void 0===n&&(n=Pt.now);var r=t.call(this,e,n)||this;return r.actions=[],r._active=!1,r}return e(n,t),n.prototype.flush=function(t){var e=this.actions;if(this._active)e.push(t);else{var n;this._active=!0;do{if(n=t.execute(t.state,t.delay))break}while(t=e.shift());if(this._active=!1,n){for(;t=e.shift();)t.unsubscribe();throw n}}},n}(Pt))(gt),_t=xt;function St(t,e){return t===e}function kt(t){return t&&s(t.schedule)}function Et(t){return t[t.length-1]}function It(t){return kt(Et(t))?t.pop():void 0}function At(t,e){return void 0===e&&(e=0),M((function(n,r){n.subscribe(Y(r,(function(n){return B(r,t,(function(){return r.next(n)}),e)}),(function(){return B(r,t,(function(){return r.complete()}),e)}),(function(n){return B(r,t,(function(){return r.error(n)}),e)})))}))}function Tt(t,e){return void 0===e&&(e=0),M((function(n,r){r.add(t.schedule((function(){return n.subscribe(r)}),e))}))}function Ot(t,e){if(!t)throw new Error("Iterable cannot be null");return new j((function(n){B(n,e,(function(){var r=t[Symbol.asyncIterator]();B(n,e,(function(){r.next().then((function(t){t.done?n.complete():n.next(t.value)}))}),0,!0)}))}))}function Dt(t,e){return e?function(t,e){if(null!=t){if(q(t))return function(t,e){return U(t).pipe(Tt(e),At(e))}(t,e);if(c(t))return function(t,e){return new j((function(n){var r=0;return e.schedule((function(){r===t.length?n.complete():(n.next(t[r++]),n.closed||this.schedule())}))}))}(t,e);if(l(t))return function(t,e){return U(t).pipe(Tt(e),At(e))}(t,e);if(V(t))return Ot(t,e);if(N(t))return function(t,e){return new j((function(n){var r;return B(n,e,(function(){r=t[G](),B(n,e,(function(){var t,e,i;try{e=(t=r.next()).value,i=t.done}catch(t){return void n.error(t)}i?n.complete():n.next(e)}),0,!0)})),function(){return s(null==r?void 0:r.return)&&r.return()}}))}(t,e);if(F(t))return function(t,e){return Ot(R(t),e)}(t,e)}throw z(t)}(t,e):U(t)}function Ct(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return Dt(t,It(t))}function jt(t,e){return M((function(n,r){var i=null,o=0,u=!1,c=function(){return u&&!i&&r.complete()};n.subscribe(Y(r,(function(n){null==i||i.unsubscribe();var u=0,s=o++;U(t(n,s)).subscribe(i=Y(r,(function(t){return r.next(e?e(n,t,s,u++):t)}),(function(){i=null,c()})))}),(function(){u=!0,c()})))}))}var Lt=Array.isArray,qt=Object.getPrototypeOf,Vt=Object.prototype,zt=Object.keys;function Gt(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var n=It(t),r=function(t){return s(Et(t))?t.pop():void 0}(t),i=function(t){if(1===t.length){var e=t[0];if(Lt(e))return{args:e,keys:null};if((r=e)&&"object"==typeof r&&qt(r)===Vt){var n=zt(e);return{args:n.map((function(t){return e[t]})),keys:n}}}var r;return{args:t,keys:null}}(t),o=i.args,u=i.keys;if(0===o.length)return Dt([],n);var c=new j(function(t,e,n){return void 0===n&&(n=C),function(r){Nt(e,(function(){for(var i=t.length,o=new Array(i),u=i,c=i,s=function(i){Nt(e,(function(){var s=Dt(t[i],e),l=!1;s.subscribe(Y(r,(function(t){o[i]=t,l||(l=!0,c--),c||r.next(n(o.slice()))}),(function(){--u||r.complete()})))}),r)},l=0;l<i;l++)s(l)}),r)}}(o,n,u?function(t){return function(t,e){return t.reduce((function(t,n,r){return t[n]=e[r],t}),{})}(u,t)}:C));return r?c.pipe(X(r)):c}function Nt(t,e,n){t?B(n,t,e):e()}(new(function(){function t(){this.currentPositions={P1:[],P2:[]}}return Object.defineProperty(t.prototype,"diceValue",{get:function(){return this._diceValue},set:function(t){this._diceValue=t,yt.setDiceValue(t)},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"turn",{get:function(){return this._turn},set:function(t){this._turn=t,yt.setTurn(t)},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"state",{get:function(){return this._state},set:function(t){this._state=t,t===ft?(yt.enableDice(),yt.unhighlightPieces()):yt.disableDice()},enumerable:!1,configurable:!0}),t.prototype.startGame=function(){console.log("a"),this.listenDiceClick(),this.listenResetClick(),this.listenPieceClick(),this.resetGame()},t.prototype.listenDiceClick=function(){var t,e,n,r=this;et(ht,"click").pipe((300,void 0===n&&(n=xt),M((function(t,e){var r=null,i=null,o=null,u=function(){if(r){r.unsubscribe(),r=null;var t=i;i=null,e.next(t)}};function c(){var t=o+300,i=n.now();if(i<t)return r=this.schedule(void 0,t-i),void e.add(r);u()}t.subscribe(Y(e,(function(t){i=t,o=n.now(),r||(r=n.schedule(c,300),e.add(r))}),(function(){u(),e.complete()}),void 0,(function(){i=r=null})))}))),(void 0===e&&(e=C),t=null!=t?t:St,M((function(n,r){var i,o=!0;n.subscribe(Y(r,(function(n){var u=e(n);!o&&t(i,u)||(o=!1,i=u,r.next(n))})))})))).subscribe((function(){r.onDiceClick()}))},t.prototype.onDiceClick=function(){console.log("dice is clicked"),this.diceValue=Math.floor(6*Math.random())+1,this.state="DICE_ROLLED",this.checkForEligiblePieces()},t.prototype.listenResetClick=function(){var t,e,n,r,i=this;et(pt,"click").pipe((t=function(){i.resetGame()},r=s(t)?{next:t,error:e,complete:n}:t,r?M((function(t,e){var n;null===(n=r.subscribe)||void 0===n||n.call(r);var i=!0;t.subscribe(Y(e,(function(t){var n;null===(n=r.next)||void 0===n||n.call(r,t),e.next(t)}),(function(){var t;i=!1,null===(t=r.complete)||void 0===t||t.call(r),e.complete()}),(function(t){var n;i=!1,null===(n=r.error)||void 0===n||n.call(r,t),e.error(t)}),(function(){var t,e;i&&(null===(t=r.unsubscribe)||void 0===t||t.call(r)),null===(e=r.finalize)||void 0===e||e.call(r)})))})):C)).subscribe()},t.prototype.resetGame=function(){var t=this;Ct(null).pipe(jt((function(){return t.currentPositions=structuredClone(ot),Gt(it.map((function(e){return Dt([0,1,2,3]).pipe(W((function(n){"P1"!=e&&"P2"!==e||t.setPiecePosition(e,n,ot[e][n])})))})))}))).subscribe({complete:function(){t.turn=0,t.state=ft,console.log("Game reset completed.")}})},t.prototype.listenPieceClick=function(){var t,e=this;et(dt,"click").pipe((t=function(t){return t.target.classList.contains("player-piece")},M((function(e,n){var r=0;e.subscribe(Y(n,(function(e){return t.call(undefined,e,r++)&&n.next(e)})))}))),W((function(t){var e=t.target;return{player:e.getAttribute("player-id"),piece:e.getAttribute("piece")}})),jt((function(t){var n=t.player,r=t.piece;return e.handlePieceClick(n,r)}))).subscribe((function(){return console.log("piece was clicked")}))},t.prototype.handlePieceClick=function(t,e){var n=this;return Ct(t).pipe(W((function(){return parseInt(e,10)})),jt((function(e){if("P1"===t||"P2"===t){var r=n.currentPositions[t][e];if(!ot[t].includes(r))return n.movePiece(t,e,n.diceValue);n.setPiecePosition(t,e,ut[t]),n.state=ft}return Ct(null)})))},t.prototype.setPiecePosition=function(t,e,n){console.log(t,e,n),this.currentPositions[t][e]=n,yt.setPiecePosition(t,e,n)},t.prototype.movePiece=function(t,e,n){var r,i,o,u,c,l,a,f=this;return(l=200,void 0===l&&(l=0),void 0===a&&(a=xt),l<0&&(l=0),function(t,e,n){void 0===t&&(t=0),void 0===n&&(n=_t);var r=-1;return null!=e&&(kt(e)?n=e:r=e),new j((function(e){var i,o=(i=t)instanceof Date&&!isNaN(i)?+t-n.now():t;o<0&&(o=0);var u=0;return n.schedule((function(){e.closed||(e.next(u++),0<=r?this.schedule(void 0,r):e.complete())}),o)}))}(l,l,a)).pipe((u=function(){return n>0},void 0===c&&(c=!1),M((function(t,e){t.subscribe(Y(e,(function(t){var n=u(0);(n||c)&&e.next(t),!n&&e.complete()})))}))),(i=function(){return f.incrementPiecePosition(t,e),n--,Ct(null)},s(o)?J(i,o,1):J(i,1)),(r=function(){0===n&&(f.hasPlayerWon(t)?(alert("Player ".concat(t," won")),f.resetGame()):f.checkForKill(t,e)||6===f.diceValue?f.state=ft:f.changeTurn())},M((function(t,e){try{t.subscribe(e)}finally{e.add(r)}}))))},t.prototype.incrementPiecePosition=function(t,e){this.setPiecePosition(t,e,this.getIncrementedPosition(t,e))},t.prototype.getIncrementedPosition=function(t,e){var n=this.currentPositions[t][e];return console.log(n),n===lt[t]?ct[t][0]:51===n?0:n+1},t.prototype.changeTurn=function(){this.turn=0===this.turn?1:0,this.state=ft},t.prototype.checkForEligiblePieces=function(){var t=it[this.turn];if("P1"===t||"P2"===t){var e=this.getEligiblePieces(t);e.length?yt.highlightPieces(t,e):this.changeTurn()}},t.prototype.getEligiblePieces=function(t){var e=this;return[0,1,2,3].filter((function(n){var r=e.currentPositions[t][n];return!(r==st[t]||ot[t].includes(r)&&6!==e.diceValue||ct[t].includes(r)&&e._diceValue>st[t]-r)}))},t.prototype.hasPlayerWon=function(t){var e=this;return[0,1,2,3].every((function(n){return e.currentPositions[t][n]===st[t]}))},t.prototype.checkForKill=function(t,e){var n=this,r=this.currentPositions[t][e],i="P1"===t?"P2":"P1",o=!1;return[0,1,2,3].forEach((function(t){var e=n.currentPositions[i][t];r!==e||at.includes(r)||(n.setPiecePosition(i,t,ot[i][t]),o=!0)})),o},t}())).startGame()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,